.. _cmake_Einsums_AddExecutable:

Einsums_AddExecutable
=====================


.. cmake:command:: einsums_add_executable

   Define an Einsums executable target with rich options (install/layout, GPU language, flags, unity, etc.).

   A convenience wrapper around :cmake:command:`add_executable` plus project‑standard setup:
   source/headers discovery, GPU language handling (CUDA/HIP/NVHPC), macOS dSYM generation,
   custom output names/suffixes, optional install rules, and forwarding of build policy flags to
   :cmake:command:`einsums_setup_target`.

   **Signature**
   ``einsums_add_executable(<name>
       [GPU]
       [EXCLUDE_FROM_ALL]
       [EXCLUDE_FROM_DEFAULT_BUILD]
       [INTERNAL_FLAGS]
       [NOLIBS]
       [UNITY_BUILD]
       [NOINSTALL]
       [INI <file>]
       [FOLDER <ide-folder>]
       [SOURCE_ROOT <dir>]
       [HEADER_ROOT <dir>]
       [SOURCE_GLOB <pattern>]
       [HEADER_GLOB <pattern>]
       [OUTPUT_NAME <basename>]
       [OUTPUT_SUFFIX <subdir>]
       [INSTALL_SUFFIX <dir>]
       [LANGUAGE <C|CXX|CUDA|HIP>]
       [SOURCES <...>] [HEADERS <...>] [AUXILIARY <...>]
       [DEPENDENCIES <targets...>]
       [COMPILE_FLAGS <...>] [LINK_FLAGS <...>]
   )``

   **Positional**
   - ``name`` *(required)*: Target name.

   **Boolean options**
   - ``GPU``: Mark the target as GPU code. Sets target language to CUDA/HIP (or NVHPC CUDA link).
   - ``EXCLUDE_FROM_ALL``: Do not build by default (opt‑in only).
   - ``EXCLUDE_FROM_DEFAULT_BUILD``: Exclude from default config build on multi‑config generators.
   - ``INTERNAL_FLAGS``: Forwarded to :cmake:command:`einsums_setup_target` to enable internal policy flags.
   - ``NOLIBS``: Forwarded to `einsums_setup_target`; avoid linking standard Einsums libs.
   - ``UNITY_BUILD``: Forwarded to `einsums_setup_target` to opt into unity builds.
   - ``NOINSTALL``: Suppress install rules for this executable.

   **One‑value keywords**
   - ``INI``: (reserved) Path to an INI file for target‑specific settings.
   - ``FOLDER``: IDE folder/group (e.g., “Apps/Tools”).
   - ``SOURCE_ROOT``: Base path for source grouping (default ``"."``).
   - ``HEADER_ROOT``: Base path for header grouping (default ``"."``).
   - ``SOURCE_GLOB``, ``HEADER_GLOB``: (reserved) Glob patterns—actual expansion handled upstream.
   - ``OUTPUT_NAME``: Basename of produced artifact (prefixed by `EINSUMS_WITH_EXECUTABLE_PREFIX`).
   - ``OUTPUT_SUFFIX``: Extra path component under the runtime output directory (e.g., ``tools``).
   - ``INSTALL_SUFFIX``: Override install destination (defaults to :cmake:variable:`CMAKE_INSTALL_BINDIR`).
   - ``LANGUAGE``: Nominal language (default ``CXX``). GPU/compilers may override per‑file.

   **Multi‑value keywords**
   - ``SOURCES``: Source files for the executable.
   - ``HEADERS``: Header files to attach for IDE organization.
   - ``AUXILIARY``: Extra files to add to the target (scripts, data).
   - ``DEPENDENCIES``: Link/usage dependencies (targets).
   - ``COMPILE_FLAGS``: Extra compile options (forwarded to `einsums_setup_target`).
   - ``LINK_FLAGS``: Extra link options (forwarded).

   **Behavior (high‑level)**
   1. **Defaults & roots** — Ensures ``LANGUAGE=CXX``, ``SOURCE_ROOT``/``HEADER_ROOT`` default to ``"."``.
   2. **Source staging** — Uses project helper :cmake:command:`einsums_add_library_sources_noglob`
      to normalize provided ``SOURCES`` (and attach headers); groups files with
      :cmake:command:`einsums_add_source_group` under ``FOLDER``/roots for IDEs.
   3. **GPU language tweaks**
      - When ``EINSUMS_WITH_HIP``: `.cu` sources are coerced to ``LANGUAGE HIP``.
      - With NVHPC: `.cu` sources get compiler‑specific flags via
        :cmake:command:`einsums_add_nvhpc_cuda_flags`; if GPU content is present, link with ``-cuda``.
      - With ``GPU`` option:
        * HIP available → target ``LANGUAGE HIP``,
        * NVHPC → set link flags ``-cuda``,
        * otherwise → target ``LANGUAGE CUDA``.
   4. **Target creation** — Calls :cmake:command:`add_executable` with sources/headers/auxiliary.
   5. **macOS dSYM** — On Apple with Debug/RelWithDebInfo, post‑build :cmake:command:`dsymutil` runs
      to generate a `.dSYM` bundle.
   6. **Output naming/layout**
      - ``OUTPUT_NAME`` sets the runtime name (prefixed).
      - ``OUTPUT_SUFFIX`` adjusts runtime output directories per‑config (MSVC) or single‑config.
   7. **Install rules**
      - Skipped if ``NOINSTALL`` **or** ``EXCLUDE_FROM_ALL`` is set.
      - Otherwise installs the exe to ``CMAKE_INSTALL_BINDIR`` (or ``INSTALL_SUFFIX``).
      - On MSVC, installs PDBs for Debug/RelWithDebInfo.
   8. **Exclusion controls**
      - Applies ``EXCLUDE_FROM_ALL`` and/or ``EXCLUDE_FROM_DEFAULT_BUILD`` properties to the target.
   9. **Forwarding to project policy**
      - Constructs `_target_flags` from ``NOLIBS``, ``INTERNAL_FLAGS``, ``UNITY_BUILD`` and calls
        :cmake:command:`einsums_setup_target`:
        ``einsums_setup_target(<name> TYPE EXECUTABLE FOLDER <...> COMPILE_FLAGS <...> LINK_FLAGS <...> DEPENDENCIES <...> <_target_flags>)``.

   **Notes**
   - If ``EINSUMS_WITH_HIP`` is enabled, `.cu` files can be compiled as HIP sources; this allows
     mixed codebases to compile under HIP toolchains.
   - NVHPC CUDA linkage is handled by setting target ``LINK_FLAGS`` to ``-cuda`` when GPU sources are detected.
   - File grouping/log output is produced via project helpers (`einsums_print_list`) for traceability.

   **Examples**
   Minimal:
   .. code-block:: cmake

      einsums_add_executable(einsums-tool
        SOURCES tools/main.cpp
        DEPENDENCIES Einsums::einsums
      )

   CUDA (NVHPC) app with custom output dir and no install:
   .. code-block:: cmake

      einsums_add_executable(simulator
        GPU
        SOURCES src/sim.cu src/util.cpp
        OUTPUT_SUFFIX "gpu"
        NOINSTALL
        DEPENDENCIES Einsums::einsums_cuda
        COMPILE_FLAGS -DUSE_FAST_MATH
      )

   HIP build, IDE grouping, unity:
   .. code-block:: cmake

      einsums_add_executable(bench
        FOLDER "Apps/Benchmarks"
        SOURCE_ROOT "${CMAKE_SOURCE_DIR}/apps/bench"
        HEADER_ROOT "${CMAKE_SOURCE_DIR}/apps/bench"
        SOURCES apps/bench/main.cpp apps/bench/kernels.cu
        UNITY_BUILD
        DEPENDENCIES Einsums::einsums_hip
      )

   **See also**
   - :cmake:command:`add_executable`
   - :cmake:command:`einsums_setup_target`
   - :cmake:command:`einsums_add_library_sources_noglob`, :cmake:command:`einsums_add_source_group`
   - :cmake:command:`dsymutil`
