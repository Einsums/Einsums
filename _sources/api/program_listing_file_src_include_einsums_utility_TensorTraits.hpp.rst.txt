
.. _program_listing_file_src_include_einsums_utility_TensorTraits.hpp:

Program Listing for File TensorTraits.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_include_einsums_utility_TensorTraits.hpp>` (``src/include/einsums/utility/TensorTraits.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <cstddef>
   #include <type_traits>
   
   namespace einsums {
   
   template <typename T, size_t Rank>
   struct Tensor;
   
   template <typename T, size_t Rank>
   struct TensorView;
   
   template <typename T, size_t Rank>
   struct DiskTensor;
   
   template <typename T, size_t ViewRank, size_t Rank>
   struct DiskView;
   
   namespace detail {
   
   template <typename D, size_t Rank, typename T>
   struct IsIncoreRankTensor
       : public std::bool_constant<std::is_same_v<std::decay_t<D>, Tensor<T, Rank>> || std::is_same_v<std::decay_t<D>, TensorView<T, Rank>>> {
   };
   template <typename D, size_t Rank, typename T>
   inline constexpr bool IsIncoreRankTensorV = IsIncoreRankTensor<D, Rank, T>::value;
   
   template <typename D, size_t Rank, size_t ViewRank = Rank, typename T = double>
   struct IsOndiskTensor
       : public std::bool_constant<std::is_same_v<D, DiskTensor<T, Rank>> || std::is_same_v<D, DiskView<T, ViewRank, Rank>>> {};
   template <typename D, size_t Rank, size_t ViewRank = Rank, typename T = double>
   inline constexpr bool IsOndiskTensorV = IsOndiskTensor<D, Rank, ViewRank, T>::value;
   
   } // namespace detail
   
   template <typename Input, size_t Rank, typename DataType = double>
   concept CoreRankTensor = detail::IsIncoreRankTensorV<Input, Rank, DataType>;
   
   template <typename Input, size_t Rank, size_t ViewRank = Rank, typename DataType = double>
   concept DiskRankTensor = detail::IsOndiskTensorV<Input, Rank, ViewRank, DataType>;
   
   } // namespace einsums
