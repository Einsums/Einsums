#include "einsums/_Common.hpp"

#include "einsums/DeviceTensor.hpp"
#include "einsums/GPULinearAlgebra.hpp"

#include <catch2/catch_all.hpp>
#include <hip/driver_types.h>
#include <hip/hip_common.h>
#include <hip/hip_runtime_api.h>
#include <type_traits>

#include "catch2/catch_test_macros.hpp"
#include "einsums.hpp"
#include "src/backends/linear_algebra/hipblas/hipblas.hpp"

TEST_CASE("GPU Tensor Creation", "[gpu]") {
    using namespace einsums;
    using namespace einsums::gpu;

    gpu::initialize();

    DeviceTensor<double, 2> A("A", einsums::detail::DEV_ONLY, 3, 3);
    DeviceTensor<double, 2> B("B", einsums::detail::MAPPED, 3, 3);
    DeviceTensor<double, 2> C("C", einsums::detail::PINNED, 3, 3);

    REQUIRE((A.dim(0) == 3 && A.dim(1) == 3));
    REQUIRE((B.dim(0) == 3 && B.dim(1) == 3));
    REQUIRE((C.dim(0) == 3 && C.dim(1) == 3));

    for (size_t i = 0; i < 3; i++) {
        for (size_t j = 0; j < 3; j++) {
            std::fprintf(stderr, "%f ", A(i, j).get());
        }
    }

    std::fprintf(stderr, "\n");

    A.zero();
    B.zero();
    C.zero();

    for (size_t i = 0; i < 3; i++) {
        for (size_t j = 0; j < 3; j++) {
            std::fprintf(stderr, "%f ", A(i, j).get());
        }
    }

    for (size_t i = 0; i < 3; i++) {
        for (size_t j = 0; j < 3; j++) {
            REQUIRE(A(i, j).get() == 0);
            REQUIRE(B(i, j).get() == 0);
            REQUIRE(C(i, j).get() == 0);
        }
    }

    A(0, 0) = 1.0;
    A(1, 1) = 1.0;
    A(2, 2) = 1.0;

    B(0, 0) = 1.0;
    B(1, 1) = 1.0;
    B(2, 2) = 1.0;

    for (size_t i = 0; i < 3; i++) {
        REQUIRE(A(i, i).get() == 1.0);
        REQUIRE(B(i, i).get() == 1.0);
        for (size_t j = 0; j < i; j++) {
            REQUIRE(A(i, j).get() == 0);
            REQUIRE(B(i, j).get() == 0);
            REQUIRE(A(j, i).get() == 0);
            REQUIRE(B(j, i).get() == 0);
        }
    }

    einsums::backend::linear_algebra::hipblas::initialize();

    einsums::linear_algebra::gpu::gemm<false, false>(1.0, A, B, 1.0, &C);

    for (size_t i = 0; i < 3; i++) {
        REQUIRE(C(i, i).get() == 1.0);
        for (size_t j = 0; j < i; j++) {
            REQUIRE(C(i, j).get() == 0);
            REQUIRE(C(j, i).get() == 0);
        }
    }

    einsums::backend::linear_algebra::hipblas::finalize();
}

TEST_CASE("GPU Tensor GEMMs", "[gpu]") {
    using namespace einsums;
    using namespace einsums::detail;
    using namespace einsums::gpu;
    using namespace einsums::gpu::detail;

    gpu::initialize();
    einsums::backend::linear_algebra::hipblas::initialize();

    DeviceTensor<double, 2> A("A", DEV_ONLY, 3, 3), B("B", DEV_ONLY, 3, 3), C("C", DEV_ONLY, 3, 3);

    // Input data.
    std::vector<double> A_data{1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}, B_data{11.0, 22.0, 33.0, 44.0, 55.0, 66.0, 77.0, 88.0, 99.0};
    // Host vector for comparisons.
    std::vector<double> comp_data;
    double *C_data = new double[9];

    hip_catch(hipMemcpy((void *) A.data(), (const void *) A_data.data(), 9 * sizeof(double), hipMemcpyHostToDevice));
    hip_catch(hipMemcpy((void *) B.data(), (const void *) B_data.data(), 9 * sizeof(double), hipMemcpyHostToDevice));

    einsums::linear_algebra::gpu::gemm<false, false>(1.0, A, B, 0.0, &C);

    comp_data = {330.0, 396.0, 462.0, 726.0, 891.0, 1056.0, 1122.0, 1386.0, 1650.0};
    hip_catch(hipMemcpy((void *) C_data, (const void *) C.data(), 9 * sizeof(double), hipMemcpyDeviceToHost));

    for(int i = 0; i < 9; i++) {
        REQUIRE(C_data[i] == comp_data[i]);
    }

    einsums::linear_algebra::gpu::gemm<true, false>(1.0, A, B, 0.0, &C);

    comp_data = {726.0, 858.0, 990.0, 858.0, 1023.0, 1188.0, 990.0, 1188.0, 1386.0};
    hip_catch(hipMemcpy((void *) C_data, (const void *) C.data(), 9 * sizeof(double), hipMemcpyDeviceToHost));

    for(int i = 0; i < 9; i++) {
        REQUIRE(C_data[i] == comp_data[i]);
    }

    einsums::linear_algebra::gpu::gemm<false, true>(1.0, A, B, 0.0, &C);

    comp_data = {154.0, 352.0, 550.0, 352.0, 847.0, 1342.0, 550.0, 1342.0, 2134.0};
    hip_catch(hipMemcpy((void *) C_data, (const void *) C.data(), 9 * sizeof(double), hipMemcpyDeviceToHost));

    for(int i = 0; i < 9; i++) {
        REQUIRE(C_data[i] == comp_data[i]);
    }

    einsums::linear_algebra::gpu::gemm<true, true>(1.0, A, B, 0.0, &C);

    comp_data = {330.0, 726.0, 1122.0, 396.0, 891.0, 1386.0, 462.0, 1056.0, 1650.0};
    hip_catch(hipMemcpy((void *) C_data, (const void *) C.data(), 9 * sizeof(double), hipMemcpyDeviceToHost));

    for(int i = 0; i < 9; i++) {
        REQUIRE(C_data[i] == comp_data[i]);
    }

    delete[] C_data;

    einsums::backend::linear_algebra::hipblas::finalize();

}

TEST_CASE("GPU Energy Calculation", "[gpu]") {

    using namespace einsums;
    using namespace einsums::detail;
    using namespace einsums::gpu;
    using namespace einsums::gpu::detail;
    using namespace einsums::backend::linear_algebra;
    using namespace einsums::backend::linear_algebra::hipblas;
    using namespace einsums::backend::linear_algebra::hipblas::detail;
    using namespace einsums::tensor_algebra;

    // Find the integrals and geometry for water in the sto-3g basis.
    std::vector<double> S_host{1.0,0.236703936510848,-0.0,-0.0,-0.0,0.038405599785757,0.038405599785757,0.236703936510848,1.0,0.0,
-0.0,0.0,0.386138840478249,0.38613884047825,-0.0,0.0,1.0,-0.0,0.0,0.268438243716457,
-0.268438243716457,-0.0,-0.0,-0.0,1.0,-0.0,0.209726941420375,0.209726941420375,-0.0,0.0,
0.0,-0.0,1.0,-0.0,-0.0,0.038405599785757,0.386138840478249,0.268438243716457,0.209726941420375,-0.0,
1.0,0.181759886298063,0.038405599785757,0.38613884047825,-0.268438243716457,0.209726941420375,-0.0,0.181759886298063,1.0,};

    std::vector<double> H_host{-32.57739541261033,-7.578832816647488,0.0,-0.014473835903318,0.0,-1.240102256333302,-1.240102256333303,-7.578832816647488,-9.20094327192934,0.0,
-0.176890246723779,0.0,-2.906709830220527,-2.906709830220527,0.0,0.0,-7.458819309224371,0.0,0.0,-1.6751501447186712,
1.675150144718672,-0.014473835903318,-0.176890246723779,0.0,-7.415311754245677,0.0,-1.3568682579595641,-1.3568682579595641,0.0,0.0,
0.0,0.0,-7.347144867731366,0.0,1e-15,-1.240102256333302,-2.906709830220527,-1.6751501447186712,-1.3568682579595641,0.0,
-4.540171070273183,-1.071145883317951,-1.240102256333303,-2.906709830220527,1.675150144718672,-1.3568682579595641,1e-15,-1.071145883317951,-4.540171070273184};

    std::vector<double> ERI_host{4.785065404705506,0.741380351973408,0,0,0,0.121785349416812,0.121785349416812,0.741380351973408,1.11894686634247,0,
0,0,0.313334133203848,0.313334133203848,0,0,1.115813812152428,0,0,0.183538575024754,
-0.183538575024754,0,0,0,1.115813812152428,0,0.143396050576365,0.143396050576365,0,0,
0,0,1.115813812152428,0,0,0.121785349416812,0.313334133203848,0.183538575024754,0.143396050576365,0,
0.470723326368778,0.10586444424177,0.121785349416812,0.313334133203848,-0.183538575024754,0.143396050576365,0,0.10586444424177,0.470723326368778,0.741380351973408,
0.136873385354388,0,0,0,0.022309236062653,0.022309236062653,0.136873385354388,0.256633394730974,0,0,
0,0.07284010950806,0.07284010950806,0,0,0.256683985810103,0,0,0.043197737649215,-0.043197737649215,
0,0,0,0.256683985810103,0,0.03374977152294,0.03374977152294,0,0,0,
0,0.256683985810103,0,0,0.022309236062653,0.07284010950806,0.043197737649215,0.03374977152294,0,0.111191806911617,
0.024847613930679,0.022309236062653,0.07284010950806,-0.043197737649215,0.03374977152294,0,0.024847613930679,0.111191806911617,0,0,
0.024477412258099,0,0,0.000807385153071,-0.000807385153071,0,0,0.037808607416361,0,0,
0.004317163347981,-0.004317163347981,0.024477412258099,0.037808607416361,0,0,0,0.009644729450701,0.009644729450701,0,
0,0,0,0,0.001744920871023,-0.001744920871023,0,0,0,0,
0,0,0,0.000807385153071,0.004317163347981,0.009644729450701,0.001744920871023,0,0.008115429695629,0,
-0.000807385153071,-0.004317163347981,0.009644729450701,-0.001744920871023,0,0,-0.008115429695629,0,0,0,
0.024477412258099,0,0.000630798415149,0.000630798415149,0,0,0,0.037808607416361,0,0.003372937671059,
0.003372937671059,0,0,0,0,0,0.001744920871023,-0.001744920871023,0.024477412258099,0.037808607416361,
0,0,0,0.008774614178918,0.008774614178918,0,0,0,0,0,
0,0,0.000630798415149,0.003372937671059,0.001744920871023,0.008774614178918,0,0.006340468574121,0.001780485118538,0.000630798415149,
0.003372937671059,-0.001744920871023,0.008774614178918,0,0.001780485118538,0.006340468574121,0,0,0,0,
0.024477412258099,0,0,0,0,0,0,0.037808607416361,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0.024477412258099,0.037808607416361,0,0,0,0.007411332582996,
0.007411332582996,0,0,0,0,0.007411332582996,0,0,0,0,
0,0,0.007411332582996,0,0,0.121785349416812,0.022309236062653,0.000807385153071,0.000630798415149,0,
0.003683107960076,0.003626347038495,0.022309236062653,0.041611622300923,0.001519113027787,0.001186861173649,0,0.012121617421746,0.011738086015383,0.000807385153071,
0.001519113027787,0.04168594504622,0.000121848710546,0,0.007487641649768,-0.006661611939184,0.000630798415149,0.001186861173649,0.000121848710546,0.041625184454921,
0,0.005849986797397,0.005670572138161,0,0,0,0,0.041529985808763,0,0,
0.003683107960076,0.012121617421746,0.007487641649768,0.005849986797397,0,0.018641085379951,0.004091767456984,0.003626347038495,0.011738086015383,-0.006661611939184,
0.005670572138161,0,0.004091767456984,0.017890930404213,0.121785349416812,0.022309236062653,-0.000807385153071,0.000630798415149,0,0.003626347038495,
0.003683107960076,0.022309236062653,0.041611622300923,-0.001519113027787,0.001186861173649,0,0.011738086015383,0.012121617421746,-0.000807385153071,-0.001519113027787,
0.04168594504622,-0.000121848710546,0,0.006661611939184,-0.007487641649768,0.000630798415149,0.001186861173649,-0.000121848710546,0.041625184454921,0,
0.005670572138161,0.005849986797397,0,0,0,0,0.041529985808763,0,0,0.003626347038495,
0.011738086015383,0.006661611939184,0.005670572138161,0,0.017890930404213,0.004091767456984,0.003683107960076,0.012121617421746,-0.007487641649768,0.005849986797397,
0,0.004091767456984,0.018641085379951,0.741380351973408,0.136873385354388,0,0,0,0.022309236062653,0.022309236062653,
0.136873385354388,0.256633394730974,0,0,0,0.07284010950806,0.07284010950806,0,0,0.256683985810103,
0,0,0.043197737649215,-0.043197737649215,0,0,0,0.256683985810103,0,0.03374977152294,
0.03374977152294,0,0,0,0,0.256683985810103,0,0,0.022309236062653,0.07284010950806,
0.043197737649215,0.03374977152294,0,0.111191806911617,0.024847613930679,0.022309236062653,0.07284010950806,-0.043197737649215,0.03374977152294,0,
0.024847613930679,0.111191806911617,1.11894686634247,0.256633394730974,0,0,0,0.041611622300923,0.041611622300923,0.256633394730974,
0.817206321526058,0,0,0,0.258884490884116,0.258884490884116,0,0,0.817022605320914,0,
0,0.163910454165551,-0.163910454165551,0,0,0,0.817022605320914,0,0.128060881873733,0.128060881873733,
0,0,0,0,0.817022605320914,0,0,0.041611622300923,0.258884490884116,0.163910454165551,
0.128060881873733,0,0.454660662254829,0.096193087497251,0.041611622300923,0.258884490884116,-0.163910454165551,0.128060881873733,0,0.096193087497251,
0.454660662254829,0,0,0.037808607416361,0,0,0.001519113027787,-0.001519113027787,0,0,
0.180518392104632,0,0,0.033774590907255,-0.033774590907255,0.037808607416361,0.180518392104632,0,0,0,
0.064012118671572,0.064012118671572,0,0,0,0,0,0.015709756842096,-0.015709756842096,0,
0,0,0,0,0,0,0.001519113027787,0.033774590907255,0.064012118671572,0.015709756842096,
0,0.088850240147481,0,-0.001519113027787,-0.033774590907255,0.064012118671572,-0.015709756842096,0,0,-0.088850240147481,
0,0,0,0.037808607416361,0,0.001186861173649,0.001186861173649,0,0,0,
0.180518392104632,0,0.026387602416983,0.026387602416983,0,0,0,0,0,0.015709756842096,
-0.015709756842096,0.037808607416361,0.180518392104632,0,0,0,0.056178354074388,0.056178354074388,0,0,
0,0,0,0,0,0.001186861173649,0.026387602416983,0.015709756842096,0.056178354074388,0,
0.069417415538897,0.016738373835546,0.001186861173649,0.026387602416983,-0.015709756842096,0.056178354074388,0,0.016738373835546,0.069417415538897,0,
0,0,0,0.037808607416361,0,0,0,0,0,0,
0.180518392104632,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0.037808607416361,0.180518392104632,0,
0,0,0.043904546857743,0.043904546857743,0,0,0,0,0.043904546857743,0,
0,0,0,0,0,0.043904546857743,0,0,0.313334133203848,0.07284010950806,
0.004317163347981,0.003372937671059,0,0.012121617421746,0.011738086015383,0.07284010950806,0.258884490884116,0.033774590907255,0.026387602416983,0,
0.103816561020432,0.082805311891239,0.004317163347981,0.033774590907255,0.262635422168582,0.006469355508936,0,0.079876222072782,-0.044241691101453,0.003372937671059,
0.026387602416983,0.006469355508936,0.259409439191131,0,0.062406144205124,0.048360757597054,0,0,0,0,
0.254355024719237,0,0,0.012121617421746,0.103816561020432,0.079876222072782,0.062406144205124,0,0.235420950941441,0.038415486590652,
0.011738086015383,0.082805311891239,-0.044241691101453,0.048360757597054,0,0.038415486590652,0.151924586584762,0.313334133203848,0.07284010950806,-0.004317163347981,
0.003372937671059,0,0.011738086015383,0.012121617421746,0.07284010950806,0.258884490884116,-0.033774590907255,0.026387602416983,0,0.082805311891239,
0.103816561020432,-0.004317163347981,-0.033774590907255,0.262635422168582,-0.006469355508936,0,0.044241691101453,-0.079876222072782,0.003372937671059,0.026387602416983,
-0.006469355508936,0.259409439191131,0,0.048360757597054,0.062406144205123,0,0,0,0,0.254355024719237,
0,0,0.011738086015383,0.082805311891239,0.044241691101453,0.048360757597054,0,0.151924586584762,0.038415486590652,0.012121617421746,
0.103816561020432,-0.079876222072782,0.062406144205123,0,0.038415486590652,0.235420950941441,0,0,0.024477412258099,0,
0,0.000807385153071,-0.000807385153071,0,0,0.037808607416361,0,0,0.004317163347981,-0.004317163347981,
0.024477412258099,0.037808607416361,0,0,0,0.009644729450701,0.009644729450701,0,0,0,
0,0,0.001744920871023,-0.001744920871023,0,0,0,0,0,0,
0,0.000807385153071,0.004317163347981,0.009644729450701,0.001744920871023,0,0.008115429695629,0,-0.000807385153071,-0.004317163347981,
0.009644729450701,-0.001744920871023,0,0,-0.008115429695629,0,0,0.037808607416361,0,0,
0.001519113027787,-0.001519113027787,0,0,0.180518392104632,0,0,0.033774590907255,-0.033774590907255,0.037808607416361,
0.180518392104632,0,0,0,0.064012118671572,0.064012118671572,0,0,0,0,
0,0.015709756842096,-0.015709756842096,0,0,0,0,0,0,0,
0.001519113027787,0.033774590907255,0.064012118671572,0.015709756842096,0,0.088850240147481,0,-0.001519113027787,-0.033774590907255,0.064012118671572,
-0.015709756842096,0,0,-0.088850240147481,1.115813812152428,0.256683985810103,0,0,0,0.04168594504622,
0.04168594504622,0.256683985810103,0.817022605320914,0,0,0,0.262635422168582,0.262635422168582,0,0,
0.880159093375046,0,0,0.175365427696742,-0.175365427696742,0,0,0,0.785270203138277,0,
0.126210780623062,0.126210780623062,0,0,0,0,0.785270203138277,0,0,0.04168594504622,
0.262635422168582,0.175365427696742,0.126210780623062,0,0.469762103528712,0.095806822348931,0.04168594504622,0.262635422168582,-0.175365427696742,0.126210780623062,
0,0.095806822348931,0.469762103528713,0,0,0,0,0,0.000121848710546,-0.000121848710546,
0,0,0,0,0,0.006469355508936,-0.006469355508936,0,0,0,
0.047444445118384,0,0.009282755762835,0.009282755762835,0,0,0.047444445118384,0,0,0.009945153134844,
-0.009945153134844,0,0,0,0,0,0,0,0.000121848710546,0.006469355508936,
0.009282755762835,0.009945153134844,0,0.025791716791396,0,-0.000121848710546,-0.006469355508936,0.009282755762835,-0.009945153134844,0,
0,-0.025791716791396,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0.047444445118384,0,0,0,0,0,0,0,0,0,
0,0,0.047444445118384,0,0,0.006911497572849,-0.006911497572849,0,0,0,
0,0.006911497572849,0,0,0,0,0,0,-0.006911497572849,0,
0,0.183538575024754,0.043197737649215,0.009644729450701,0.001744920871023,0,0.007487641649768,0.006661611939184,0.043197737649215,0.163910454165551,
0.064012118671572,0.015709756842096,0,0.079876222072782,0.044241691101453,0.009644729450701,0.064012118671572,0.175365427696742,0.009282755762835,0,
0.075103217640351,-0.013099738777752,0.001744920871023,0.015709756842096,0.009282755762835,0.159606200123556,0,0.047460399285077,0.025320151118325,0,
0,0,0,0.156572544561561,0,0,0.007487641649768,0.079876222072782,0.075103217640351,0.047460399285077,
0,0.206690042488559,0.025685197500691,0.006661611939184,0.044241691101453,-0.013099738777752,0.025320151118325,0,0.025685197500691,0.073615422819083,
-0.183538575024754,-0.043197737649215,0.009644729450701,-0.001744920871023,0,-0.006661611939184,-0.007487641649768,-0.043197737649215,-0.163910454165551,0.064012118671572,
-0.015709756842096,0,-0.044241691101453,-0.079876222072782,0.009644729450701,0.064012118671572,-0.175365427696742,0.009282755762835,0,-0.013099738777752,
0.075103217640351,-0.001744920871023,-0.015709756842096,0.009282755762835,-0.159606200123556,0,-0.025320151118325,-0.047460399285077,0,0,
0,0,-0.156572544561561,0,0,-0.006661611939184,-0.044241691101453,-0.013099738777752,-0.025320151118325,0,
-0.073615422819083,-0.025685197500691,-0.007487641649768,-0.079876222072782,0.075103217640351,-0.047460399285077,0,-0.025685197500691,-0.20669004248856,0,
0,0,0.024477412258099,0,0.000630798415149,0.000630798415149,0,0,0,0.037808607416361,
0,0.003372937671059,0.003372937671059,0,0,0,0,0,0.001744920871023,-0.001744920871023,
0.024477412258099,0.037808607416361,0,0,0,0.008774614178918,0.008774614178918,0,0,0,
0,0,0,0,0.000630798415149,0.003372937671059,0.001744920871023,0.008774614178918,0,0.006340468574121,
0.001780485118538,0.000630798415149,0.003372937671059,-0.001744920871023,0.008774614178918,0,0.001780485118538,0.006340468574121,0,0,
0,0.037808607416361,0,0.001186861173649,0.001186861173649,0,0,0,0.180518392104632,0,
0.026387602416983,0.026387602416983,0,0,0,0,0,0.015709756842096,-0.015709756842096,0.037808607416361,
0.180518392104632,0,0,0,0.056178354074388,0.056178354074388,0,0,0,0,
0,0,0,0.001186861173649,0.026387602416983,0.015709756842096,0.056178354074388,0,0.069417415538897,0.016738373835546,
0.001186861173649,0.026387602416983,-0.015709756842096,0.056178354074388,0,0.016738373835546,0.069417415538897,0,0,0,
0,0,0.000121848710546,-0.000121848710546,0,0,0,0,0,0.006469355508936,
-0.006469355508936,0,0,0,0.047444445118384,0,0.009282755762835,0.009282755762835,0,0,
0.047444445118384,0,0,0.009945153134844,-0.009945153134844,0,0,0,0,0,
0,0,0.000121848710546,0.006469355508936,0.009282755762835,0.009945153134844,0,0.025791716791396,0,-0.000121848710546,
-0.006469355508936,0.009282755762835,-0.009945153134844,0,0,-0.025791716791396,1.115813812152428,0.256683985810103,0,0,
0,0.041625184454921,0.041625184454921,0.256683985810103,0.817022605320914,0,0,0,0.259409439191131,0.259409439191131,
0,0,0.785270203138277,0,0,0.159606200123556,-0.159606200123556,0,0,0,
0.880159093375046,0,0.135497737480495,0.135497737480495,0,0,0,0,0.785270203138277,0,
0,0.041625184454921,0.259409439191131,0.159606200123556,0.135497737480495,0,0.456900909053721,0.098762351285116,0.041625184454921,0.259409439191131,
-0.159606200123556,0.135497737480495,0,0.098762351285116,0.456900909053721,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0.047444445118384,0,0,0,0,0,0.047444445118384,0,0.005399853711303,0.005399853711303,
0,0,0,0,0.005399853711303,0,0,0,0,0,
0,0.005399853711303,0,0,0.143396050576365,0.03374977152294,0.001744920871023,0.008774614178918,0,0.005849986797397,
0.005670572138161,0.03374977152294,0.128060881873733,0.015709756842096,0.056178354074388,0,0.062406144205124,0.048360757597054,0.001744920871023,0.015709756842096,
0.126210780623062,0.009945153134844,0,0.047460399285077,-0.025320151118325,0.008774614178918,0.056178354074388,0.009945153134844,0.135497737480495,0,
0.051436804504574,0.038857871090576,0,0,0,0,0.12232787857153,0,0,0.005849986797397,
0.062406144205124,0.047460399285077,0.051436804504574,0,0.161483959338374,0.025974451190177,0.005670572138161,0.048360757597054,-0.025320151118325,0.038857871090576,
0,0.025974451190177,0.096752175289782,0.143396050576365,0.03374977152294,-0.001744920871023,0.008774614178918,0,0.005670572138161,0.005849986797397,
0.03374977152294,0.128060881873733,-0.015709756842096,0.056178354074388,0,0.048360757597054,0.062406144205123,-0.001744920871023,-0.015709756842096,0.126210780623062,
-0.009945153134844,0,0.025320151118325,-0.047460399285077,0.008774614178918,0.056178354074388,-0.009945153134844,0.135497737480495,0,0.038857871090576,
0.051436804504574,0,0,0,0,0.12232787857153,0,0,0.005670572138161,0.048360757597054,
0.025320151118325,0.038857871090576,0,0.096752175289782,0.025974451190177,0.005849986797397,0.062406144205123,-0.047460399285077,0.051436804504574,0,
0.025974451190177,0.161483959338374,0,0,0,0,0.024477412258099,0,0,0,
0,0,0,0.037808607416361,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0.024477412258099,0.037808607416361,0,0,0,0.007411332582996,0.007411332582996,0,0,0,
0,0.007411332582996,0,0,0,0,0,0,0.007411332582996,0,
0,0,0,0,0,0.037808607416361,0,0,0,0,
0,0,0.180518392104632,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0.037808607416361,
0.180518392104632,0,0,0,0.043904546857743,0.043904546857743,0,0,0,0,
0.043904546857743,0,0,0,0,0,0,0.043904546857743,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0.047444445118384,0,
0,0,0,0,0,0,0,0,0,0,
0.047444445118384,0,0,0.006911497572849,-0.006911497572849,0,0,0,0,0.006911497572849,
0,0,0,0,0,0,-0.006911497572849,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0.047444445118384,0,0,0,0,0,
0.047444445118384,0,0.005399853711303,0.005399853711303,0,0,0,0,0.005399853711303,0,
0,0,0,0,0,0.005399853711303,0,0,1.115813812152428,0.256683985810103,
0,0,0,0.041529985808763,0.041529985808763,0.256683985810103,0.817022605320914,0,0,0,
0.254355024719237,0.254355024719237,0,0,0.785270203138277,0,0,0.156572544561561,-0.156572544561561,0,
0,0,0.785270203138277,0,0.12232787857153,0.12232787857153,0,0,0,0,
0.880159093375046,0,0,0.041529985808763,0.254355024719237,0.156572544561561,0.12232787857153,0,0.436750211441671,0.093903792729994,
0.041529985808763,0.254355024719237,-0.156572544561561,0.12232787857153,0,0.093903792729994,0.436750211441671,0,0,0,
0,0.007411332582996,0,0,0,0,0,0,0.043904546857743,0,
0,0,0,0,0,0.006911497572849,0,0,0,0,
0,0,0.005399853711303,0,0,0.007411332582996,0.043904546857743,0.006911497572849,0.005399853711303,0,
0.014356676714874,0.011033892047394,0,0,0,0,0.014356676714874,0,0,0,
0,0,0,0.011033892047394,0,0,0,0,0,0,
0.007411332582996,0,0,0,0,0,0,0.043904546857743,0,0,
0,0,0,0,-0.006911497572849,0,0,0,0,0,
0,0.005399853711303,0,0,0.007411332582996,0.043904546857743,-0.006911497572849,0.005399853711303,0,0.011033892047394,
0.014356676714874,0,0,0,0,0.011033892047394,0,0,0,0,
0,0,0.014356676714874,0,0,0.121785349416812,0.022309236062653,0.000807385153071,0.000630798415149,0,
0.003683107960076,0.003626347038495,0.022309236062653,0.041611622300923,0.001519113027787,0.001186861173649,0,0.012121617421746,0.011738086015383,0.000807385153071,
0.001519113027787,0.04168594504622,0.000121848710546,0,0.007487641649768,-0.006661611939184,0.000630798415149,0.001186861173649,0.000121848710546,0.041625184454921,
0,0.005849986797397,0.005670572138161,0,0,0,0,0.041529985808763,0,0,
0.003683107960076,0.012121617421746,0.007487641649768,0.005849986797397,0,0.018641085379951,0.004091767456984,0.003626347038495,0.011738086015383,-0.006661611939184,
0.005670572138161,0,0.004091767456984,0.017890930404213,0.313334133203848,0.07284010950806,0.004317163347981,0.003372937671059,0,0.012121617421746,
0.011738086015383,0.07284010950806,0.258884490884116,0.033774590907255,0.026387602416983,0,0.103816561020432,0.082805311891239,0.004317163347981,0.033774590907255,
0.262635422168582,0.006469355508936,0,0.079876222072782,-0.044241691101453,0.003372937671059,0.026387602416983,0.006469355508936,0.259409439191131,0,
0.062406144205124,0.048360757597054,0,0,0,0,0.254355024719237,0,0,0.012121617421746,
0.103816561020432,0.079876222072782,0.062406144205124,0,0.235420950941441,0.038415486590652,0.011738086015383,0.082805311891239,-0.044241691101453,0.048360757597054,
0,0.038415486590652,0.151924586584762,0.183538575024754,0.043197737649215,0.009644729450701,0.001744920871023,0,0.007487641649768,0.006661611939184,
0.043197737649215,0.163910454165551,0.064012118671572,0.015709756842096,0,0.079876222072782,0.044241691101453,0.009644729450701,0.064012118671572,0.175365427696742,
0.009282755762835,0,0.075103217640351,-0.013099738777752,0.001744920871023,0.015709756842096,0.009282755762835,0.159606200123556,0,0.047460399285077,
0.025320151118325,0,0,0,0,0.156572544561561,0,0,0.007487641649768,0.079876222072782,
0.075103217640351,0.047460399285077,0,0.206690042488559,0.025685197500691,0.006661611939184,0.044241691101453,-0.013099738777752,0.025320151118325,0,
0.025685197500691,0.073615422819083,0.143396050576365,0.03374977152294,0.001744920871023,0.008774614178918,0,0.005849986797397,0.005670572138161,0.03374977152294,
0.128060881873733,0.015709756842096,0.056178354074388,0,0.062406144205124,0.048360757597054,0.001744920871023,0.015709756842096,0.126210780623062,0.009945153134844,
0,0.047460399285077,-0.025320151118325,0.008774614178918,0.056178354074388,0.009945153134844,0.135497737480495,0,0.051436804504574,0.038857871090576,
0,0,0,0,0.12232787857153,0,0,0.005849986797397,0.062406144205124,0.047460399285077,
0.051436804504574,0,0.161483959338374,0.025974451190177,0.005670572138161,0.048360757597054,-0.025320151118325,0.038857871090576,0,0.025974451190177,
0.096752175289782,0,0,0,0,0.007411332582996,0,0,0,0,
0,0,0.043904546857743,0,0,0,0,0,0,0.006911497572849,
0,0,0,0,0,0,0.005399853711303,0,0,0.007411332582996,
0.043904546857743,0.006911497572849,0.005399853711303,0,0.014356676714874,0.011033892047394,0,0,0,0,
0.014356676714874,0,0,0,0,0,0,0.011033892047394,0,0,
0.470723326368778,0.111191806911617,0.008115429695629,0.006340468574121,0,0.018641085379951,0.017890930404213,0.111191806911617,0.454660662254829,0.088850240147481,
0.069417415538897,0,0.235420950941441,0.151924586584762,0.008115429695629,0.088850240147481,0.469762103528712,0.025791716791396,0,0.206690042488559,
-0.073615422819083,0.006340468574121,0.069417415538897,0.025791716791396,0.456900909053721,0,0.161483959338374,0.096752175289782,0,0,
0,0,0.436750211441671,0,0,0.018641085379951,0.235420950941441,0.206690042488559,0.161483959338374,0,
0.774605943919898,0.091353706761488,0.017890930404213,0.151924586584762,-0.073615422819083,0.096752175289782,0,0.091353706761488,0.302537910673863,0.10586444424177,
0.024847613930679,0,0.001780485118538,0,0.004091767456984,0.004091767456984,0.024847613930679,0.096193087497251,0,0.016738373835546,
0,0.038415486590652,0.038415486590652,0,0,0.095806822348931,0,0,0.025685197500691,-0.025685197500691,
0.001780485118538,0.016738373835546,0,0.098762351285116,0,0.025974451190177,0.025974451190177,0,0,0,
0,0.093903792729994,0,0,0.004091767456984,0.038415486590652,0.025685197500691,0.025974451190177,0,0.091353706761488,
0.01786132691686,0.004091767456984,0.038415486590652,-0.025685197500691,0.025974451190177,0,0.01786132691686,0.091353706761488,0.121785349416812,0.022309236062653,
-0.000807385153071,0.000630798415149,0,0.003626347038495,0.003683107960076,0.022309236062653,0.041611622300923,-0.001519113027787,0.001186861173649,0,
0.011738086015383,0.012121617421746,-0.000807385153071,-0.001519113027787,0.04168594504622,-0.000121848710546,0,0.006661611939184,-0.007487641649768,0.000630798415149,
0.001186861173649,-0.000121848710546,0.041625184454921,0,0.005670572138161,0.005849986797397,0,0,0,0,
0.041529985808763,0,0,0.003626347038495,0.011738086015383,0.006661611939184,0.005670572138161,0,0.017890930404213,0.004091767456984,
0.003683107960076,0.012121617421746,-0.007487641649768,0.005849986797397,0,0.004091767456984,0.018641085379951,0.313334133203848,0.07284010950806,-0.004317163347981,
0.003372937671059,0,0.011738086015383,0.012121617421746,0.07284010950806,0.258884490884116,-0.033774590907255,0.026387602416983,0,0.082805311891239,
0.103816561020432,-0.004317163347981,-0.033774590907255,0.262635422168582,-0.006469355508936,0,0.044241691101453,-0.079876222072782,0.003372937671059,0.026387602416983,
-0.006469355508936,0.259409439191131,0,0.048360757597054,0.062406144205123,0,0,0,0,0.254355024719237,
0,0,0.011738086015383,0.082805311891239,0.044241691101453,0.048360757597054,0,0.151924586584762,0.038415486590652,0.012121617421746,
0.103816561020432,-0.079876222072782,0.062406144205123,0,0.038415486590652,0.235420950941441,-0.183538575024754,-0.043197737649215,0.009644729450701,-0.001744920871023,
0,-0.006661611939184,-0.007487641649768,-0.043197737649215,-0.163910454165551,0.064012118671572,-0.015709756842096,0,-0.044241691101453,-0.079876222072782,
0.009644729450701,0.064012118671572,-0.175365427696742,0.009282755762835,0,-0.013099738777752,0.075103217640351,-0.001744920871023,-0.015709756842096,0.009282755762835,
-0.159606200123556,0,-0.025320151118325,-0.047460399285077,0,0,0,0,-0.156572544561561,0,
0,-0.006661611939184,-0.044241691101453,-0.013099738777752,-0.025320151118325,0,-0.073615422819083,-0.025685197500691,-0.007487641649768,-0.079876222072782,
0.075103217640351,-0.047460399285077,0,-0.025685197500691,-0.20669004248856,0.143396050576365,0.03374977152294,-0.001744920871023,0.008774614178918,0,
0.005670572138161,0.005849986797397,0.03374977152294,0.128060881873733,-0.015709756842096,0.056178354074388,0,0.048360757597054,0.062406144205123,-0.001744920871023,
-0.015709756842096,0.126210780623062,-0.009945153134844,0,0.025320151118325,-0.047460399285077,0.008774614178918,0.056178354074388,-0.009945153134844,0.135497737480495,
0,0.038857871090576,0.051436804504574,0,0,0,0,0.12232787857153,0,0,
0.005670572138161,0.048360757597054,0.025320151118325,0.038857871090576,0,0.096752175289782,0.025974451190177,0.005849986797397,0.062406144205123,-0.047460399285077,
0.051436804504574,0,0.025974451190177,0.161483959338374,0,0,0,0,0.007411332582996,0,
0,0,0,0,0,0.043904546857743,0,0,0,0,
0,0,-0.006911497572849,0,0,0,0,0,0,0.005399853711303,
0,0,0.007411332582996,0.043904546857743,-0.006911497572849,0.005399853711303,0,0.011033892047394,0.014356676714874,0,
0,0,0,0.011033892047394,0,0,0,0,0,0,
0.014356676714874,0,0,0.10586444424177,0.024847613930679,0,0.001780485118538,0,0.004091767456984,0.004091767456984,
0.024847613930679,0.096193087497251,0,0.016738373835546,0,0.038415486590652,0.038415486590652,0,0,0.095806822348931,
0,0,0.025685197500691,-0.025685197500691,0.001780485118538,0.016738373835546,0,0.098762351285116,0,0.025974451190177,
0.025974451190177,0,0,0,0,0.093903792729994,0,0,0.004091767456984,0.038415486590652,
0.025685197500691,0.025974451190177,0,0.091353706761488,0.01786132691686,0.004091767456984,0.038415486590652,-0.025685197500691,0.025974451190177,0,
0.01786132691686,0.091353706761488,0.470723326368778,0.111191806911617,-0.008115429695629,0.006340468574121,0,0.017890930404213,0.018641085379951,0.111191806911617,
0.454660662254829,-0.088850240147481,0.069417415538897,0,0.151924586584762,0.235420950941441,-0.008115429695629,-0.088850240147481,0.469762103528713,-0.025791716791396,
0,0.073615422819083,-0.20669004248856,0.006340468574121,0.069417415538897,-0.025791716791396,0.456900909053721,0,0.096752175289782,0.161483959338374,
0,0,0,0,0.436750211441671,0,0,0.017890930404213,0.151924586584762,0.073615422819083,
0.096752175289782,0,0.302537910673863,0.091353706761488,0.018641085379951,0.235420950941441,-0.20669004248856,0.161483959338374,0,0.091353706761488,
0.774605943919898};

    double enuc = 9.132741421965944;

    // Transfer the data to the GPU.

    einsums::gpu::initialize();
    einsums::backend::linear_algebra::hipblas::initialize();

    DeviceTensor<double, 2> S("Overlap", DEV_ONLY, 7, 7), H("Hamiltonian", DEV_ONLY, 7, 7), X("Transformation Matrix", DEV_ONLY, 7, 7), C("Coefficients", DEV_ONLY, 7, 7),
        F("Fock Matrix", DEV_ONLY, 7, 7), D("Density matrix", DEV_ONLY, 7, 7), work("Work array", DEV_ONLY, 7, 7), work2("Work array", DEV_ONLY, 7, 7);
    
    DeviceTensor<double, 1> eig_real("Real energy eigenvalues", DEV_ONLY, 7), eig_imag("Imaginary energy eigenvalues", DEV_ONLY, 7);
    DeviceTensor<double, 4> TEI("Two-electron integrals", DEV_ONLY, 7, 7, 7, 7);

    S.read(S_host);
    work.read(S_host);
    H.read(H_host);
    F.read(H_host);
    TEI.read(ERI_host);

    // Calculate the unitary matrix.
    hipblasHandle_t blas_handle = hipblas::detail::get_blas_handle();
    hipsolverHandle_t solver_handle = hipblas::detail::get_solver_handle();

    int lwork, dev_info;

    hipsolver_catch(hipsolverDsyevd_bufferSize(solver_handle, HIPSOLVER_EIG_MODE_VECTOR, HIPSOLVER_FILL_MODE_UPPER, 7, work.data(), work.stride(0), eig_real.data(), &lwork));

    double *gpu_work;
    hip_catch(hipMalloc((void **) &gpu_work, lwork * sizeof(double)));

    hipsolver_catch(hipsolverDsyevd(solver_handle, HIPSOLVER_EIG_MODE_VECTOR, HIPSOLVER_FILL_MODE_UPPER, 7, work.data(), work.stride(0), eig_real.data(), gpu_work, lwork, &dev_info));

    hip_catch(hipDeviceSynchronize());

    std::vector<double> eig_host(7);

    eig_real.write(eig_host);

    work2.zero();

    for(int i = 0; i < 7; i++) {
        eig_host[i] = 1 / sqrt(eig_host[i]);
        work2(i, i) = eig_host[i];
    }

    double *alpha_gpu, *beta_gpu, alpha = 1, beta = 0;

    hip_catch(hipMalloc((void **) &alpha_gpu, sizeof(double)));
    hip_catch(hipMalloc((void **) &beta_gpu, sizeof(double)));
    
    hip_catch(hipMemcpy((void *) alpha_gpu, (const void *) &alpha, sizeof(double), hipMemcpyHostToDevice));
    hip_catch(hipMemcpy((void *) beta_gpu, (const void *) &beta, sizeof(double), hipMemcpyHostToDevice));

    hipblas_catch(hipblasDgemm(blas_handle, HIPBLAS_OP_N, HIPBLAS_OP_N, 7, 7, 7, alpha_gpu, work.data(), work.stride(0), work2.data(), work2.stride(0), beta_gpu, X.data(), X.stride(0)));
    hip_catch(hipDeviceSynchronize());

    // while loop.
    DeviceTensor<double, 0> energy("Energy", DEV_ONLY);
    double energy1, energy2;
    int count = 0;

    while(count < 100 && (count < 2 || fabs(energy1 - energy2) > 1e-6)) {

        // Find F'
        linear_algebra::gpu::gemmm(F, X, &work);

        // Find C' and the eigenvalues. They should be in increasing order already.
        hipsolver_catch(hipsolverDsyevd(solver_handle, HIPSOLVER_EIG_MODE_VECTOR, HIPSOLVER_FILL_MODE_UPPER, 7, work.data(), work.stride(0), eig_real.data(), gpu_work, lwork, &dev_info));

        hip_catch(hipDeviceSynchronize());

        // Find C.
        hipblas_catch(hipblasDgemm(blas_handle, HIPBLAS_OP_N, HIPBLAS_OP_N, 7, 7, 7, alpha_gpu, X.data(), X.stride(0), work.data(), work.stride(0), beta_gpu, C.data(), C.stride(0)));

        hip_catch(hipDeviceSynchronize());

        // Find D.
        auto C_view = C(Range{0, 7}, Range{0, 5});

        hipblas_catch(hipblasDgemm(blas_handle, HIPBLAS_OP_T, HIPBLAS_OP_N, 7, 5, 7, alpha_gpu, C_view.data(), C_view.stride(0), C_view.data(), C_view.stride(0), beta_gpu, D.data(), D.stride(0)));
        hip_catch(hipDeviceSynchronize());

        // Create new F.
        F = H;
        tensor_algebra::gpu::einsum(1.0, Indices{index::r, index::s}, &F, 2.0, Indices{index::t, index::u}, D, Indices{index::r, index::s, index::t, index::u}, TEI);
        tensor_algebra::gpu::einsum(1.0, Indices{index::r, index::s}, &F, -1.0, Indices{index::t, index::u}, D, Indices{index::r, index::t, index::s, index::u}, TEI);

        // Find the energy.
        hipblas_catch(hipblasDgeam(blas_handle, HIPBLAS_OP_N, HIPBLAS_OP_N, 7, 7, alpha_gpu, H.data(), H.stride(0), alpha_gpu, F.data(), F.stride(0), work.data(), work.stride(0)));
        hip_catch(hipDeviceSynchronize());
        tensor_algebra::gpu::einsum(0.0, Indices{}, &energy, 1.0, Indices{index::r, index::s}, D, Indices{index::r, index::s}, work);

        energy2 = energy1;
        energy1 = (double) energy;

        // Increase the count.
        count++;
    }

    REQUIRE(fabs(energy1 - energy2) <= 1e-6);
    REQUIRE(fabs(energy1 - -76.02629117630596) <= 1e-6);

    hipblas::finalize();

}