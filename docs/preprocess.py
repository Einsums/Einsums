#!/usr/bin/env python3
# ----------------------------------------------------------------------------------------------
#  Copyright (c) The Einsums Developers. All rights reserved.
#  Licensed under the MIT License. See LICENSE.txt in the project root for license information.
# ----------------------------------------------------------------------------------------------

import subprocess
import os
import sys
from string import Template


def main():
    doxygen(os.path.abspath(os.path.join('..')))


def doxygen(root_path):
    """
    Generate Doxygen configuration file.
    """
    confs = doxygen_config(root_path)
    build_path = os.path.join(root_path, 'docs', 'build', 'doxygen')
    gen_path = os.path.join(build_path, 'Doxyfile')
    if not os.path.exists(build_path):
        os.makedirs(build_path)
    with open(gen_path, 'w') as fd:
        fd.write("#Please Don't Edit! This config file was autogenerated by ")
        fd.write(f"doxygen({root_path}) in docs/preprocess.py.\n")
        for c in confs:
            fd.write(c)


class DoxygenTpl(Template):
    delimiter = '@'


def doxygen_config(root_path):
    """
    Fetch all Doxygen sub-config files and gather them with the main config file.
    """
    confs = []
    dsrc_path = os.path.join(root_path, 'docs', 'source')
    sub = dict(ROOT_DIR=root_path)
    with open(os.path.join(dsrc_path, 'doxyfile')) as fd:
        conf = DoxygenTpl(fd.read())
        confs.append(conf.substitute(CUR_DIR=dsrc_path, **sub))

    for dpath, _, files in os.walk(root_path):
        if '.doxyfile' not in files:
            continue
        conf_path = os.path.join(dpath, '.doxyfile')
        with open(conf_path) as fd:
            conf = DoxygenTpl(fd.read())
            confs.append(conf.substitute(CUR_DIR=dpath, **sub))
    return confs


if __name__ == '__main__':
    main()
