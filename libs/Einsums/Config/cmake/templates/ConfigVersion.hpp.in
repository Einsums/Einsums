// ----------------------------------------------------------------------------------------------
//  Copyright (c) The Einsums Developers. All rights reserved.
//  Licensed under the MIT License. See LICENSE.txt in the project root for license information.
// ----------------------------------------------------------------------------------------------

// Do not edit this file! It has been generated by the cmake configuration step.

#pragma once

#include <Einsums/Config/ExportDefinitions.hpp>
#include <Einsums/Preprocessor/Cat.hpp>

// clang-format off
/// Evaluates to the major version of einsums
#define EINSUMS_VERSION_MAJOR @EINSUMS_VERSION_MAJOR@
/// Evaluates to the minor version of einsums
#define EINSUMS_VERSION_MINOR @EINSUMS_VERSION_MINOR@
/// Evaluates to the patch version of einsums
#define EINSUMS_VERSION_PATCH @EINSUMS_VERSION_PATCH@
// clang-format on

/// Evaluates to the einsums version:
/// ``EINSUMS_VERSION_FULL & 0xFF0000 == EINSUMS_VERSION_MAJOR``
/// ``EINSUMS_VERSION_FULL & 0x00FF00 == EINSUMS_VERSION_MINOR``
/// ``EINSUMS_VERSION_FULL & 0x0000FF == EINSUMS_VERSION_PATCH``
#define EINSUMS_VERSION_FULL ((EINSUMS_VERSION_MAJOR << 16) | (EINSUMS_VERSION_MINOR << 8) | EINSUMS_VERSION_PATCH)

// clang-format off
/// Evaluates to the release date of this einsums version in the format YYYYMMDD.
#define EINSUMS_VERSION_DATE @EINSUMS_VERSION_DATE@
// clang-format on

/// Evaluates to the version tag (empty for releases, ``-trunk`` on the
/// development branch, ``-rcX`` on a release candidate.
#define EINSUMS_VERSION_TAG "@EINSUMS_VERSION_TAG@"

#if !defined(EINSUMS_HAVE_GIT_COMMIT)
#    define EINSUMS_HAVE_GIT_COMMIT "unknown"
#endif

///////////////////////////////////////////////////////////////////////////////
// The version check enforces the major and minor version numbers to match for
// every compilation unit to be compiled.
#define EINSUMS_CHECK_VERSION                                                                                                              \
    EINSUMS_PP_CAT(einsums_check_version_, EINSUMS_PP_CAT(EINSUMS_VERSION_MAJOR, EINSUMS_PP_CAT(_, EINSUMS_VERSION_MINOR)))                \
    /**/
///////////////////////////////////////////////////////////////////////////////
namespace einsums {
// Helper data structures allowing to automatically detect version problems
// between applications and the core libraries.
EINSUMS_EXPORT extern char const EINSUMS_CHECK_VERSION[];
} // namespace einsums

///////////////////////////////////////////////////////////////////////////////
#if !defined(EINSUMS_EXPORTS) && !defined(EINSUMS_NO_VERSION_CHECK)

// This is instantiated for each translation unit outside of the einsums core
// library, forcing to resolve the variable EINSUMS_CHECK_VERSION.
namespace {
// Note: this function is never executed.
#    if defined(__GNUG__)
__attribute__((unused))
#    endif
char const *
check_einsums_version() {
    char const *versions[] = {einsums::EINSUMS_CHECK_VERSION};
    return versions[0];
}
} // namespace
#endif
