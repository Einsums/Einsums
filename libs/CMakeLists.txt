#----------------------------------------------------------------------------------------------
# Copyright (c) The Einsums Developers. All rights reserved.
# Licensed under the MIT License. See LICENSE.txt in the project root for license information.
#----------------------------------------------------------------------------------------------

include(Einsums_Message)
include(Einsums_AddPseudoDependencies)
include(Einsums_AddPseudoTarget)

# add example pseudo targets needed for modules
if(EINSUMS_WITH_EXAMPLES)
  einsums_add_pseudo_target(examples.modules)
  einsums_add_pseudo_dependencies(examples examples.modules)
endif()

# add test pseudo targets needed for modules einsums_warn("EINSUMS_WITH_TESTS=${EINSUMS_WITH_TESTS}")
if(EINSUMS_WITH_TESTS)
  if(EINSUMS_WITH_TESTS_UNIT)
    einsums_add_pseudo_target(tests.unit.modules)
    einsums_add_pseudo_dependencies(tests.unit tests.unit.modules)
  endif()

  if(EINSUMS_WITH_EXAMPLES AND EINSUMS_WITH_TESTS_EXAMPLES)
    einsums_add_pseudo_target(tests.examples.modules)
    einsums_add_pseudo_dependencies(tests.examples tests.examples.modules)
  endif()

  if(EINSUMS_WITH_TESTS_REGRESSIONS)
    einsums_add_pseudo_target(tests.regressions.modules)
    einsums_add_pseudo_dependencies(tests.regressions tests.regressions.modules)
  endif()

  if(EINSUMS_WITH_TESTS_BENCHMARKS)
    einsums_add_pseudo_target(tests.performance.modules)
    einsums_add_pseudo_dependencies(tests.performance tests.performance.modules)
  endif()

  if(EINSUMS_WITH_TESTS_HEADERS)
    einsums_add_pseudo_target(tests.headers.modules)
    einsums_add_pseudo_dependencies(tests.headers tests.headers.modules)
  endif()
endif()

# Generate a file that lists all enabled modules for checks that might be optional based on the presence of a module or
# not
set(MODULE_ENABLED_MODULE_DEFINES)

# variables needed for config_strings_modules.hpp
set(CONFIG_STRINGS_MODULES_INCLUDES)
set(CONFIG_STRINGS_MODULES_ENTRIES)

# List of sub-directories to work through
set(einsums_libs Einsums)

foreach(lib ${einsums_libs})
  add_library(${lib} SHARED src/dummy.cpp)
  set_target_properties(
    ${lib}
    PROPERTIES VERSION ${EINSUMS_VERSION}
               SOVERSION ${EINSUMS_SOVERSION}
               CLEAN_DIRECT_OUTPUT 1
               OUTPUT_NAME ${lib}
               FOLDER "Core")
  install(
    TARGETS ${lib}
    EXPORT einsums_targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${lib})
  einsums_export_targets(${lib})

  add_subdirectory(${lib})
endforeach()

# einsums_add_module populates EINSUMS_ENABLED_MODULES
foreach(module ${EINSUMS_ENABLED_MODULES})
  string(TOUPPER ${module} uppercase_module)

  set(MODULE_ENABLED_MODULE_DEFINES "${MODULE_ENABLED_MODULE_DEFINES}#define EINSUMS_HAVE_MODULE_${uppercase_module}\n")
endforeach()

configure_file("${PROJECT_SOURCE_DIR}/cmake/templates/ModulesEnabled.hpp.in"
               "${PROJECT_BINARY_DIR}/libs/Einsums/Config/include/Einsums/Config/ModulesEnabled.hpp" @ONLY)

if(EINSUMS_WITH_ITTNOTIFY)
  target_link_libraries(Einsums PUBLIC einsums_internal::amplifier)
endif()
