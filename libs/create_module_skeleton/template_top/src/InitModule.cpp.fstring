//----------------------------------------------------------------------------------------------
// Copyright (c) The Einsums Developers. All rights reserved.
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.
//----------------------------------------------------------------------------------------------

#include <Einsums/CommandLine.hpp>
#include <Einsums/Runtime.hpp>

#include "InitModule.hpp"

namespace einsums {{
    
/*
 * Set up the internal state of the module. If the module does not need to be set up, then this
 * file can be safely deleted. Make sure that if you do, you also remove its reference in the CMakeLists.txt,
 * as well as the initialization header for the module and the dependence on Einsums_Runtime, assuming these
 * aren't being used otherwise.
 *
 * Logging will not be available by the time the initialization routines are run.
 */

int setup_{lib_name}_{module_name}() {{
    // Auto-generated code. Do not touch if you are unsure of what you are doing.
    // Instead, modify the other functions below.
    // If you don't need a function, you may remove its respective line from the
    // if statement below.
    static bool is_initialized = false;

    if(!is_initialized) {{
        register_arguments(add_{lib_name}_{module_name}_arguments);
        register_startup_function(initialize_{lib_name}_{module_name});
        register_shutdown_function(finalize_{lib_name}_{module_name});

        is_initialized = true;
    }}

    return 0;
}}

EINSUMS_EXPORT void add_{lib_name}_{module_name}_arguments(argparse::ArgumentParser &parser) {{
    /** @todo Fill in.
     *
     * If you are not using one of the following maps, you may remove references to it.
     * The maps may not need to be locked before use, but it should still be done just in
     * case.
     */
    auto &global_config = GlobalConfigMap::get_singleton();
    auto &global_string = global_config.get_string_map()->get_value();
    auto &global_double = global_config.get_double_map()->get_value();
    auto &global_int = global_config.get_int_map()->get_value();
    auto &global_bool = global_config.get_bool_map()->get_value();
}}

void initialize_{lib_name}_{module_name}() {{
    /// @todo Fill in.
}}

void finalize_{lib_name}_{module_name}() {{
    /// @todo Fill in.
}}

}}