name: Python

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        cxx: [ L-Gnu, M-Clang, L-Intel, W-ClangCL ]
        # Here, we specify the oldest version, the newest version, and one in between.
        # If it works for these, it should work for all versions in this range.
        python_version: [ "3.9", "3.11", "3.13" ]
        include:
          - cmargs: ""
          - testargs: ""
          - cxx: L-Gnu
            os: ubuntu-latest
          - cxx: M-Clang
            os: macos-latest
          - cxx: L-Intel
            os: ubuntu-latest
            cmargs: >
              -DCMAKE_CXX_COMPILER=icpx
              -DMKL_INTERFACE=lp64
              -DCMAKE_CXX_FLAGS="--gcc-toolchain=${CONDA_PREFIX} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot -target ${HOST}"
              -DOpenMP_CXX_INCLUDE_DIR="${CONDA_PREFIX}/include"
          - cxx: W-ClangCL
            os: windows-latest
            hptt: OFF
            llvm-version: "17.0.6"
            cmargs: >
              -DCMAKE_CXX_COMPILER=clang-cl
              -DCMAKE_C_COMPILER=clang-cl
              -DMKL_ROOT="${CONDA_PREFIX}"
              -DEINSUMS_STATIC_BUILD=ON
              -D CMAKE_CXX_FLAGS="-IC:\Miniconda3\envs\einsums-dev\opt\compiler\include"
            testargs: >
              -DCMAKE_CXX_COMPILER=clang-cl
              -DCMAKE_C_COMPILER=clang-cl
              -DMKL_ROOT="${CONDA_PREFIX}"
              -DEINSUMS_STATIC_BUILD=ON
              -D ZLIB_USE_STATIC_LIBS=ON
    name: "Python ${{matrix.python_version}} â€¢ ${{ matrix.cxx }}"
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3

      - name: Write a Conda Env File
        run: |
          cat > export.yaml <<EOF
          name: einsums-dev
          channels:
            - conda-forge
            - nodefaults
          dependencies:
            - cmake
            - ninja
            - cxx-compiler
            - catch2
            - fftw
            - fmt
            - range-v3
            - blas-devel
            #WMKL- mkl-devel=2023.2.0
            #MKL- libblas=*=*mkl
            #ACC- libblas=*=*accelerate
            #OBL- libblas=*=*openblas
            #OBL- openblas=*=*openmp*
            - hdf5
            - zlib
            #- dpcpp_linux-64
            #- mkl
            - pybind11
            - pytest
            - numpy
          EOF
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            :
            sed -i "s;#MKL;;g" export.yaml
            if [[ "${{ matrix.cxx }}" == "L-Intel" ]]; then
              sed -i "s/#- dpcpp_linux-64/- dpcpp_linux-64=2024.0.0/g" export.yaml
              sed -i "s/#- mkl/- mkl=2024.0.0/g" export.yaml
            fi
          fi
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            :
            sed -E -i.bak "s;#OBL;;g" export.yaml
            sed -E -i.bak "s;- elfutils;;g" export.yaml
          fi
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            :
            sed -i "s;#WMKL;;g" export.yaml
            sed -i "s;- blas-devel;;g" export.yaml
            sed -i "s;- elfutils;;g" export.yaml
            sed -i "s/- cxx/#- cxx/g" export.yaml
            sed -i "s;#- dpcpp_linux-64;- clangdev ${{ matrix.llvm-version }};g" export.yaml
          fi
          # model sed for L/W
          #   sed -i "s;;;g" export.yaml
          # model sed for M
          #   sed -E -i.bak "s;;;g" export.yaml
          cat export.yaml

      - name: Install dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: einsums-dev
          #environment-file: devtools/conda-envs/${{matrix.environment}}
          environment-file: export.yaml
          miniforge-variant: Mambaforge
          use-mamba: true
          channels: conda-forge
          python-version: "${{matrix.python_version}}"

      # Step is unnecessary; remove step for debugging.
      - name: Confound Environment - test fetched everything
        if: matrix.cxx == 'L-src'
        run: |
          conda remove catch2 fmt range-v3 --solver=libmamba

      - name: Conda environment
        run: |
          mamba info
          mamba list

      - name: Prepare compiler environment for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        run: |
          cmake \
            -S . \
            -B "${{github.workspace}}/build" \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D EINSUMS_SHOW_WARNING=OFF \
            -D EINSUMS_USE_HPTT=ON \
            -D EINSUMS_STATIC_BUILD=ON \
            -D EINSUMS_BUILD_PYTHON="${{matrix.python_version}}" \
            -D CMAKE_INSTALL_PREFIX="${{github.workspace}}/installed" \
            -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
            -D EINSUMS_COVERAGE=ON \
            ${{ matrix.cmargs }}

      - name: Build & Install
        run: |
          cmake --build "${{github.workspace}}/build" --config Release --target install
          cat "${{github.workspace}}/installed/share/cmake/Einsums/EinsumsConfig.cmake"

      - name: Test (pytest) - unit tests
        working-directory: "${{github.workspace}}/installed"
        run: |
          if [[ "${{runner.os}}" == "Windows" ]]; then
            export PYTHONPATH="$PYTHONPATH;${{github.workspace}}/installed/lib;$CONDA_PREFIX/lib"
          else
            export PYTHONPATH=$PYTHONPATH:${{github.workspace}}/installed/lib:$CONDA_PREFIX/lib
          fi
          
          pytest "${{github.workspace}}/tests" --cov="${{github.workspace}}/tests" --cov="${{github.workspace}}/einsums" --cov-report=xml

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: "${{github.workspace}}"
          working-directory: "${{github.workspace}}"
          disable_search: true
          flags: python
          file: ${{github.workspace}}/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Test (find_package) - consume installation
        shell: bash -l {0}
        run: |
          mkdir test_installed_library && cd test_installed_library
          cat > CMakeLists.txt <<EOF
          cmake_minimum_required(VERSION 3.8)
          project(sample)
          find_package(Einsums REQUIRED)
          include(CMakePrintHelpers)
          cmake_print_properties(
            TARGETS
              Einsums::einsums
              HDF5::HDF5
              tgt::lapack
              OpenMP::OpenMP_CXX
            PROPERTIES
              IMPORTED_LINK_DEPENDENT_LIBRARIES
              INTERFACE_LOCATION
              INTERFACE_LINK_LIBRARIES
              INTERFACE_INCLUDE_DIRECTORIES
              INTERFACE_COMPILE_DEFINITIONS
              INTERFACE_COMPILE_OPTIONS
              INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
            )
          add_executable(timings "../timing/main.cpp")
          target_link_libraries(timings Einsums::einsums)
          EOF
          cmake -S . \
            -B build \
            -G Ninja \
            --log-level verbose \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="${CONDA_PREFIX};${CONDA_PREFIX}/Library;${{ github.workspace }}/installed" \
            ${{ matrix.testargs }}
          cmake --build build
          ./build/timings

