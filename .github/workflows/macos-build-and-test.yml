name: macOS build and test workflow
on:
  workflow_call:
    inputs:
      build_ref:
        type: string
        required: false
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_cache_size:
        type: string
        required: false
        default: 2G
      build_configure_extra_args:
        type: string
        required: false

permissions: read-all

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, RelWithDebInfo ]

    name: "clang • openblas • ${{ matrix.build_type }}"
    runs-on: macos-latest
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/build_cache_${{ inputs.build_cache_suffix }}
      CCACHE_MAXSIZE: ${{ inputs.build_cache_size }}
    defaults:
      run:
        shell: bash -el {0}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.build_ref }}
          path: src

      - name: Cache Build Cache
        uses: actions/cache@v4
        with:
          path: build_cache_${{ inputs.build_cache_suffix }}
          key: einsums-${{ runner.os }}-${{ matrix.build_type }}-${{ inputs.build_cache_suffix }}-${{ github.sha }}
          restore-keys: einsums-${{ runner.os }}-${{ matrix.build_type }}-${{ inputs.build_cache_suffix }}-

      # From https://github.com/conda-incubator/setup-miniconda?tab=readme-ov-file#caching-environments
      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: einsums-env

      - name: Install ruamel.yaml
        run: |
          conda install -c conda-forge ruamel.yaml

      - name: Merge Conda YAML files
        working-directory: src/devtools/conda-envs
        run: |
          pwd
          python merge_yml.py gcc openblas

      - name: Get Date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-date.outputs.today }}-${{ hashFiles('src/devtools/conda-envs/conda.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run:
          conda env update -n einsums-env -f src/devtools/conda-envs/conda.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Conda Environment
        run: |
          conda info
          conda list

      - name: Configure CMake
        run: |
          cmake \
            -G Ninja \
            -S "$GITHUB_WORKSPACE/src" \
            -B "$GITHUB_WORKSPACE/build" \
            -D CMAKE_C_COMPILER_LAUNCHER=ccache \
            -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -D EINSUMS_SHOW_WARNING=OFF \
            -D CMAKE_INSTALL_PREFIX="${{ github.workspace }}/installed" \
            -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}"

      - name: Build and Install
        run: |
          cmake --build "${{ github.workspace }}/build" --config Release --target install

      - name: Test (CTest) - Unit Tests
        working-directory: "${{ github.workspace }}/build"
        run: ctest --rerun-failed --output-on-failure

      - name: Generate coverage information
        working-directory: "${{github.workspace}}/build"
        run: |
          export NOTES=$(find . -name "*.gcno")
          export SOURCES=${NOTES/.gcno/}
          echo "NOTES=$NOTES"
          echo "SOURCES=$SOURCES"
          gcov $SOURCES || echo "returned $?"
          lcov --capture --directory . --output-file coverage.info --exclude /usr/\* --exclude \*/build/_deps/\*

      - name: Upload C++ coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: "${{github.workspace}}/build"
          working-directory: "${{github.workspace}}"
          disable_search: true
          file: ${{github.workspace}}/build/coverage.info
          flags: cpp
          token: ${{ secrets.CODECOV_TOKEN }}

#      - name: Test (find_package) - consume installation
#        shell: bash -l {0}
#        run: |
#          mkdir test_installed_library && cd test_installed_library
#          cat > CMakeLists.txt <<EOF
#          cmake_minimum_required(VERSION 3.8)
#          project(sample)
#          find_package(Einsums REQUIRED)
#          include(CMakePrintHelpers)
#          cmake_print_properties(
#            TARGETS
#              Einsums::einsums
#              HDF5::HDF5
#              tgt::lapack
#              OpenMP::OpenMP_CXX
#            PROPERTIES
#              IMPORTED_LINK_DEPENDENT_LIBRARIES
#              INTERFACE_LOCATION
#              INTERFACE_LINK_LIBRARIES
#              INTERFACE_INCLUDE_DIRECTORIES
#              INTERFACE_COMPILE_DEFINITIONS
#              INTERFACE_COMPILE_OPTIONS
#              INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
#            )
#          add_executable(timings "../src/timing/main.cpp")
#          target_link_libraries(timings Einsums::einsums)
#          EOF
#          cmake -S . \
#            -B build \
#            -G Ninja \
#            --log-level verbose \
#            -DCMAKE_BUILD_TYPE=Release \
#            -DCMAKE_PREFIX_PATH="${CONDA_PREFIX};${CONDA_PREFIX}/Library;${{ github.workspace }}/installed"
#          cmake --build build
#          ./build/timings