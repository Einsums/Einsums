name: macOS build and test workflow
on:
  workflow_call:
    inputs:
      build_ref:
        type: string
        required: false
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_cache_size:
        type: string
        required: false
        default: 2G
      build_configure_extra_args:
        type: string
        required: false

permissions: read-all

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, RelWithDebInfo ]

    name: "default • openblas • ${{ matrix.build_type }}"
    runs-on: macos-latest
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/build_cache_${{ inputs.build_cache_suffix }}
      CCACHE_MAXSIZE: ${{ inputs.build_cache_size }}
    defaults:
      run:
        shell: bash -el {0}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.build_ref }}
          path: src

      - name: Cache Build Cache
        uses: actions/cache@v4
        with:
          path: build_cache_${{ inputs.build_cache_suffix }}
          key: einsums-${{ runner.os }}-${{ matrix.build_type }}-${{ inputs.build_cache_suffix }}-${{ github.sha }}
          restore-keys: einsums-${{ runner.os }}-${{ matrix.build_type }}-${{ inputs.build_cache_suffix }}-

      # From https://github.com/conda-incubator/setup-miniconda?tab=readme-ov-file#caching-environments
      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: einsums-env
          conda-remove-defaults: "true"

      - name: Install ruamel.yaml
        run: |
          conda install -c conda-forge ruamel.yaml

      - name: Merge Conda YAML files
        working-directory: src/devtools/conda-envs
        run: |
          pwd
          python merge_yml.py default openblas

      - name: Get Week
        id: get-date
        run: echo "week=$(/bin/date -u '+%W')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-date.outputs.week }}-${{ hashFiles('src/devtools/conda-envs/conda.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run:
          conda env update -n einsums-env -f src/devtools/conda-envs/conda.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Conda Environment
        run: |
          conda info
          conda list

      - name: Configure CMake
        run: |
          cmake \
            -G Ninja \
            -S "$GITHUB_WORKSPACE/src" \
            -B "$GITHUB_WORKSPACE/build" \
            -D CMAKE_C_COMPILER_LAUNCHER=ccache \
            -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -D EINSUMS_SHOW_WARNING=OFF \
            -D CMAKE_INSTALL_PREFIX="${{ github.workspace }}/installed" \
            -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
            -D EINSUMS_WITH_COVERAGE=ON \
            -D EINSUMS_BUILD_PYTHON=ON \
            -D EINSUMS_WITH_BACKTRACES=OFF \
            ${{ inputs.build_configure_extra_args }}

      - name: Build and Install
        run: |
          cmake --build "${{ github.workspace }}/build" --config Release --target install -j4

      - name: Test (CTest) - Unit Tests
        working-directory: "${{ github.workspace }}/build"
        run: ctest --rerun-failed --output-on-failure

      - name: Test (Pytest) - unit tests
        working-directory: "${{github.workspace}}/installed"
        run: |
          if [[ "${{runner.os}}" == "Windows" ]]; then
            export PYTHONPATH="$PYTHONPATH;${{github.workspace}}/installed/lib;$CONDA_PREFIX/lib"
          else
            export PYTHONPATH="$PYTHONPATH:${{github.workspace}}/installed/lib:$CONDA_PREFIX/lib"
          fi
          mkdir "${{github.workspace}}/backup" 
          mv "${{github.workspace}}/src/einsums" "${{github.workspace}}/backup/einsums"
          pytest "${{github.workspace}}/src/tests" --cov="${{github.workspace}}/installed/lib" --cov="${{github.workspace}}/src" --cov-report=xml
          
      - name: Generate coverage information
        working-directory: "${{github.workspace}}/build"
        run: |
          export PROFILES=$(find . -name "*.profraw")
          export BINARIES="$(find . -name "*_test")"
          echo "PROFILES=$PROFILES"
          echo "BINARIES=$BINARIES"
          llvm-profdata merge $PROFILES -o default.profdata
          llvm-cov export -format=lcov -ignore-filename-regex="_deps|einsums-env" -instr-profile=default.profdata $BINARIES > coverage.info

      - name: Upload C++ coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          directory: "${{github.workspace}}/src"
          working-directory: "${{github.workspace}}/src"
          disable_search: true
          files: ${{github.workspace}}/build/coverage.info
          flags: cpp,mac
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          directory: "${{github.workspace}}/installed"
          working-directory: "${{github.workspace}}/installed"
          disable_search: true
          flags: python,mac
          files: ${{github.workspace}}/installed/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Test (find_package) - consume installation
        working-directory: "${{github.workspace}}/src/testing/consume"
        shell: bash -l {0}
        run: |
          cmake -S . \
            -B build \
            -G Ninja \
            --log-level verbose \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_PREFIX_PATH="${CONDA_PREFIX};${CONDA_PREFIX}/Library;${{ github.workspace }}/installed"
          cmake --build build
          ./build/HelloWorld
