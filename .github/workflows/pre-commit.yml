name: Pre-Commit Checks
on:
  workflow_dispatch:

concurrency:
  #  Cancel a currently running workflow from the same PR or commit hash.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  detect_changes:
    name: "Detect Changes"
    uses: ./.github/workflows/detect-changes.yml

  format:
    name: Format Files
    needs: [ detect_changes ]
    if: ${{ contains(needs.detect_changes.outputs.filters, 'cmake') || contains(needs.detect_changes.outputs.filters, 'cpp') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.build_ref }}

      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: einsums-env
          conda-remove-defaults: "true"

      - name: Install ruamel.yaml
        run: |
          conda install -c conda-forge ruamel.yaml

      - name: Merge Conda YAML files
        working-directory: src/devtools/conda-envs
        run: |
          pwd
          python merge_yml.py

      - name: Get Week
        id: get-date
        run: echo "week=$(/bin/date -u '+%W')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-date.outputs.week }}-${{ hashFiles('src/devtools/conda-envs/conda.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: |
          pwd
          conda env update -n einsums-env -f src/devtools/conda-envs/conda.yml
          conda activate einsums-env
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run pre-commit hooks
        id: format
        run: |
          set +e
          NEEDS_FORMATTING=0
          FORMATTED_FILES=""
          
          # First check if any formatting is needed
          if ! pre-commit run --all-files --show-diff-on-failure; then
            NEEDS_FORMATTING=1
            echo "Running pre-commit to auto-fix formatting issues"
          
            # Run all hooks and capture the names of modified files
            pre-commit run --all-files | tee pre-commit-output.txt
          
            # Extract information about which files were modified for the PR comment
            if grep -q "Fixing cmake-format" pre-commit-output.txt; then
              FORMATTED_FILES="${FORMATTED_FILES}CMake files, "
            fi
            if grep -q "Fixing clang-format" pre-commit-output.txt; then
              FORMATTED_FILES="${FORMATTED_FILES}C++ files, "
            fi
            if grep -q "Fixing insert-license" pre-commit-output.txt; then
              FORMATTED_FILES="${FORMATTED_FILES}license headers, "
            fi
          
            # Remove trailing comma and space
            FORMATTED_FILES=$(echo $FORMATTED_FILES | sed 's/, $//')
            echo "formatted_files=$FORMATTED_FILES" >> $GITHUB_OUTPUT
          fi
          
          echo "needs_formatting=$NEEDS_FORMATTING" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.format.outputs.needs_formatting == 1
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "Apply code formatting and license headers
          
          Co-authored-by: ${{ github.event.pull_request.user.login }} <${{ github.event.pull_request.user.login }}@users.noreply.github.com>"
          git push

      - name: Add PR comment
        if: steps.format.outputs.needs_formatting == 1 && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const formattedFiles = '${{ steps.format.outputs.formatted_files }}' || 'files';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
                body: `ðŸ‘‹ I have formatted the ${formattedFiles} in this PR using pre-commit hooks. The changes have been committed automatically.`
              })