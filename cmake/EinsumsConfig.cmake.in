# EinsumsConfig.cmake
# -------------------
#
# Einsums cmake module.
# Variables like Einsums_LIBRARIES and Einsums_INCLUDE_DIRS *are not set* as targets are preferred.
# This module sets the following variables in your project::
#
#   Einsums_FOUND - true if Einsums and all required components found on the system
#   Einsums_VERSION - Einsums version in format Major.Minor.Release. Prefer target variable.
#
#
# Target variables::
#
# It is preferred to use properties set on the base target rather than using the above variables. ::
#
#   Einsums_VERSION - Einsums version in format Major.Minor.Release
#
#   get_property(_ver TARGET Einsums::einsums PROPERTY Einsums_VERSION)
#
#
# Available components: shared static hptt lp64 ilp64 ::
#
#   shared - search for only shared library
#   static - search for only static library
#   hptt - search for library with high-performance tensor transpose enabled
#   lp64 - search for library linked to 32-bit integer linear algebra libraries
#   ilp64 - search for library linked to 64-bit integer linear algebra libraries
#
#
# Exported targets::
#
# If Einsums is found, this module defines at least the first following
# :prop_tgt:`IMPORTED` target. Depending on components available, it may define::
#
#   Einsums::einsums - the main Einsums library with header & defs attached.
#
#
# Suggested usage::
#
#   find_package(Einsums)
#   find_package(Einsums 0.1 CONFIG REQUIRED COMPONENTS shared)
#
#
# The following variables can be set to guide the search for this package::
#
#   Einsums_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_Einsums - CMake variable, disables
#       find_package(Einsums) perhaps to force internal build

@PACKAGE_INIT@

set(ein Einsums)  # NameSpace

# check library style component
if (@EINSUMS_STATIC_BUILD@)  # EINSUMS_STATIC_BUILD
    set(${ein}_static_FOUND 1)
else()
    set(${ein}_shared_FOUND 1)
endif()
list(FIND ${ein}_FIND_COMPONENTS "shared" _seek_shared)
list(FIND ${ein}_FIND_COMPONENTS "static" _seek_static)

if(@EINSUMS_USE_HPTT@)  # EINSUMS_USE_HPTT
    set(${ein}_hptt_FOUND 1)
endif()

# make detectable the FindTarget*.cmake modules
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

# check library dependencies available
include(CMakeFindDependencyMacro)
unset(extraArgs)
if(${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
    list(APPEND extraArgs QUIET)
endif()
if(${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED)
    list(APPEND extraArgs REQUIRED)
endif()

if(NOT TARGET tgt::lapack)
    add_library (tgt::lapack INTERFACE IMPORTED)
    if(@EINSUMS_LINALG_VENDOR@ STREQUAL MKL)  # EINSUMS_LINALG_VENDOR
        set(MKL_INTERFACE @EINSUMS_LINALG_INT_INTERFACE@)  # EINSUMS_LINALG_INT_INTERFACE
        find_package(MKL CONFIG ${extraArgs})
        set_property (TARGET tgt::lapack PROPERTY INTERFACE_LINK_LIBRARIES MKL::MKL)
    else()
        set(BLA_VENDOR @EINSUMS_LINALG_VENDOR@)  # EINSUMS_LINALG_VENDOR
        if(@EINSUMS_LINALG_INT_INTERFACE@ STREQUAL lp64)  # EINSUMS_LINALG_INT_INTERFACE
            set(BLA_SIZEOF_INTEGER 4)
        else()
            set(BLA_SIZEOF_INTEGER 8)
        endif()
        find_package(BLAS MODULE ${extraArgs})
        find_package(LAPACK MODULE ${extraArgs})
        set_property (TARGET tgt::lapack PROPERTY INTERFACE_LINK_LIBRARIES LAPACK::LAPACK BLAS::BLAS)
    endif()
    set(${ein}_@EINSUMS_LINALG_INT_INTERFACE@_FOUND 1)
endif()

if(@EINSUMS_FFT_LIBRARY@ STREQUAL mkl)  # EINSUMS_FFT_LIBRARY
    if(@EINSUMS_LINALG_VENDOR@ STREQUAL MKL)  # EINSUMS_LINALG_VENDOR
        add_library(FFT::FFT ALIAS tgt::lapack)
    endif()
elseif(@EINSUMS_FFT_LIBRARY@ STREQUAL fftw3)  # EINSUMS_FFT_LIBRARY
    find_package(FFTW MODULE COMPONENTS FLOAT_LIB DOUBLE_LIB ${extraArgs})
    add_library(FFT::FFT INTERFACE IMPORTED)
    target_link_libraries(FFT::FFT INTERFACE FFTW::Float FFTW::Double)
endif()

if(NOT TARGET ZLIB::ZLIB)
    find_package(ZLIB)
endif()
if(NOT TARGET tgt::hdf5)
    find_dependency(TargetHDF5 @TargetHDF5_VERSION_Mm@)
endif()
if(NOT TARGET OpenMP::OpenMP_CXX)
    find_package(OpenMP MODULE COMPONENTS CXX ${extraArgs})
endif()
if(NOT TARGET range-v3::range-v3)
    find_dependency(range-v3)
endif()
if(NOT TARGET fmt::fmt)
    find_dependency(fmt)
endif()

# Check all required components are available before trying to load any
check_required_components(${ein})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${ein}::einsums)
        include("${CMAKE_CURRENT_LIST_DIR}/${ein}Targets-CXX.cmake")

    get_property(_loc TARGET ${ein}::einsums PROPERTY LOCATION)
    get_property(_ill TARGET ${ein}::einsums PROPERTY INTERFACE_LINK_LIBRARIES)
    get_property(_iid TARGET ${ein}::einsums PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
    get_property(_icd TARGET ${ein}::einsums PROPERTY INTERFACE_COMPILE_DEFINITIONS)

    if (CMAKE_VERSION VERSION_GREATER 3.15)
        message(VERBOSE "Einsums::einsums")

        get_property(_ver TARGET ${ein}::einsums PROPERTY Einsums_VERSION)
        message(VERBOSE "${ein}::einsums.${ein}_VERSION   ${_ver}")

        message(VERBOSE "${ein}_FOUND                  ${${ein}_FOUND}")
        message(VERBOSE "${ein}_VERSION                ${${ein}_VERSION}")
        message(VERBOSE "${ein}_DEFINITIONS (no var)   ${_icd}")

        message(VERBOSE "${ein}_LIBRARY (no var)       ${_loc}")
        message(VERBOSE "${ein}_LIBRARIES (no var)     ${_loc};${_ill}")
        message(VERBOSE "${ein}_INCLUDE_DIR (no var)   ${_iid}")
        message(VERBOSE "${ein}_INCLUDE_DIRS (no var)  ${_iid}")
    endif()

endif()
