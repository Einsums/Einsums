# -*- coding: utf-8 -*-
#  Copyright (c) The Einsums Developers. All rights reserved.
#  Licensed under the MIT License. See LICENSE.txt in the project root for license information.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import re
import sys
import traceback
from datetime import datetime

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Make our custom EINSUMS extension visible.
sys.path.insert(0, os.path.abspath('.') + '/extensions')

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinxcontrib.bibtex',
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'breathe',
    'sphinx_design',
    'sphinx-einsums',  # Custom Einsums roles
    'sphinx_copybutton',
]

# breathe_projects = {"Einsums": os.path.join('..', 'doxygen', 'xml')}
breathe_projects = {}
breathe_projects_source = {}
breathe_default_members = ("members", "undoc-members", "protected-members")

einsums_source_dir = '@EINSUMS_SOURCE_DIR@'
einsums_libs_dir = einsums_source_dir + '/libs'
einsums_libs = {}
header_info = {}


def get_info_from_file(source):
    title = "None"
    header = "None"

    if os.path.exists(source):
        with open(source, 'r') as file:
            for line in file:
                if re.match(r"[\\@]page", line):
                    title = line.split(r"page", 1)[-1].strip()
                elif re.match(r"[\\@](header)?file", line):
                    header = line.split(r"file", 1)[-1].strip()

    return title, header


# Dictionary including the einsums headers with their base path
# needed to link to the einsums header files themselves.
# Links generated by docs/sphinx/extensions/sphinx-einsums.py
# The text in the rst file should be:
# :einsums-header:`base_path,file_name`
link_einsums_headers = {
}


def find_link_einsums_header(include_header):
    header_link = ""
    for base_path, header_list in link_einsums_headers.items():
        if include_header in header_list:
            header_link = f":einsums-header:`{base_path},{include_header}`"
            break
        else:
            header_link = include_header
    return header_link


# Scan the libs directory for source files to be included in
# the documentation
file_regex = re.compile(r'.*\.(h|hpp)$')
for lib_dir in os.listdir(einsums_libs_dir):
    # Only process subdirectories
    if not os.path.isdir(os.path.join(einsums_libs_dir, lib_dir)) or lib_dir == 'src':
        continue

    einsums_libs[lib_dir] = []

    full_lib_dir = os.path.join(einsums_libs_dir, lib_dir)
    for subdir_full, dirs, files in os.walk(full_lib_dir):
        # strip the prefix of the directory...
        subdir = subdir_full[len(full_lib_dir) + 1:]

        # If we are in the root of the library dir, we add all
        # subdirectories as a new breathe project
        if len(subdir) == 0:
            for directory in dirs:
                breathe_projects_source[directory] = (subdir_full + '/' + directory, [])
                einsums_libs[lib_dir].append(directory)
        # We are inside a module and need to add the files
        # to the breathe project
        else:
            # We only scan include subdir...
            if not '/include' in subdir:
                continue
            # ... but omit anything in detail directory
            if '/detail' in subdir:
                continue

            # strip the name of the module... the base path is already
            # set
            subdirs = subdir.split('/')
            module = subdirs[0]
            subdir = '/'.join(subdirs[1:])
            # And now add all remaining files
            # which are headers or source files
            for f in files:
                # print(f)
                if not file_regex.match(f) is None:
                    header_file_path = subdir_full + '/' + f
                    page_title, include_header = get_info_from_file(header_file_path)
                    breathe_projects_source[module][1].append(subdir + '/' + f)
                    include_prefix = 'include/'
                    include_index = header_file_path.find(include_prefix)
                    if include_index != -1:
                        header = header_file_path[include_index + len(include_prefix):]
                        header_info[header] = (page_title, include_header)

# Generate the rst files for the API documentation
api_refs = ''
api_ref_header = '''
.. 
    ----------------------------------------------------------------------------------------------
     Copyright (c) The Einsums Developers. All rights reserved.
     Licensed under the MIT License. See LICENSE.txt in the project root for license information.
    ----------------------------------------------------------------------------------------------

.. _modules_{0}_api:

-------------------------------------------------------------------------------
{0}
-------------------------------------------------------------------------------

See :ref:`modules_overview` for a list of names and headers that are part of the public
|einsums| API.
'''

api_ref_file = '''

.. autodoxygenfile:: {0}
   :project: {1}
'''

api_header_file = '''
.. 
    ----------------------------------------------------------------------------------------------
     Copyright (c) The Einsums Developers. All rights reserved.
     Licensed under the MIT License. See LICENSE.txt in the project root for license information.
    ----------------------------------------------------------------------------------------------

.. _modules_{0}_api:

-------------------------------------------------------------------------------
{2}
-------------------------------------------------------------------------------

Defined in header {3}.

See :ref:`modules_overview` for a list of names and headers that are part of the public
|einsums| API.

.. autodoxygenfile:: {0}
   :project: {1}
'''

api_file = '''

.. toctree::
   :maxdepth: 1

'''

print(breathe_projects_source)

for lib in einsums_libs.keys():
    for module in sorted(einsums_libs[lib]):
        print(module)
        breathe_projects[module] = os.path.join('..', 'breathe', 'doxygen', module, 'xml')

        assert module in breathe_projects_source.keys()
        module_sources = breathe_projects_source[module]
        if len(module_sources[1]) == 0:
            continue
        basedir = os.path.abspath('.') + '/libs/' + lib + '/' + module + '/api'
        if not os.path.exists(basedir):
            os.makedirs(basedir)
        with open(basedir + '/full_api.rst', 'w') as module_api_ref :
            module_api_ref.write(api_ref_header.format(module))
            header_refs = ''
            header_names = set()
            for source in module_sources[1]:
                header = source[len('include/'):]
                header_splitted = re.split('[/ .]', header)

                header_name = header_splitted[-2]
                # create a new, longer header name if current one already exists
                if header_name in header_names:
                    header_name = '{0}_{1}'.format(header_splitted[-3], header_name)
                header_names.add(header_name)

                # Get the info from the dictionary using the header file path
                page_title, include_header = header_info.get(header, ("None", "None"))
                if page_title == "None":
                    page_title = header
                if include_header == "None":
                    include_header = header

                with open(basedir + '/' + header_name + '.rst', 'w') as header_ref :
                    header_ref.write(
                        api_header_file.format(header, module, page_title, find_link_einsums_header(include_header)))
                header_refs += '   /libs/' + lib + '/' + module + '/api/' + header_name + '.rst\n'
            module_api_ref.write(api_file)
            module_api_ref.write(header_refs)
        api_refs += '   /libs/' + lib + '/' + module + '/api/full_api.rst\n'

with open(os.path.abspath('.') + '/api/full_api.rst', 'w') as api_rst, open(f"{einsums_source_dir}/docs/sphinx/api/full_api.rst", "r") as lines :
    for line in lines:
        api_rst.write(line.format(api_refs))

# breathe_default_project = "Einsums"
print(breathe_projects)

breathe_doxygen_config_options = {
    'EXPAND_ONLY_PREDEF': 'YES',
    'EXCLUDE_SYMBOLS': 'detail',
    'MACRO_EXPANSION': 'YES',
    'DIRECTORY_GRAPH': 'NO',
    'PREDEFINED': '@doxygen_definitions@',
    'STRIP_FROM_PATH': einsums_source_dir,
    'EXTRACT_PRIVATE': 'NO',
    'ALIASES': r'namedrequirement{1}="<a href=\"https://en.cppreference.com/w/cpp/named_req/\1\">\1</a>"'
}

# ! this should work but doesn't. check after updating breathe version.
# breathe_doxygen_aliases = {
# }

numfig = True
primary_domain = 'cpp'
highlight_language = 'cpp'

rst_prolog = ""

# General
rst_prolog += '''
.. |einsums| replace:: *Einsums*
'''

# URLs
rst_prolog += '''
.. _einsums: https://einsums.github.io/Einsums
.. |einsums_download| replace:: |einsums| Downloads
.. _einsums_download: https://github.com/Einsums/Einsums/releases
.. |einsums_github| replace:: Github
.. _einsums_github: https://github.com/Einsums/Einsums/
.. |einsums_github_issues| replace:: |einsums| Issues
.. _einsums_github_issues: https://github.com/Einsums/Einsums/issues
.. |einsums_github_closed_issues| replace:: |einsums| Closed issues
.. _einsums_github_closed_issues: https://github.com/Einsums/Einsums/issues?q=is%3Aissue+is%3Aclosed

.. |nvidia| replace:: NVIDIA
.. _nvidia: https://nvidia.com/
.. |amd| replace:: AMD
.. _amd: https://www.amd.com/en

.. |doxygen| replace:: Doxygen
.. _doxygen: https://www.doxygen.org
.. |python| replace:: Python
.. _python: https://www.python.org
.. |sphinx| replace:: Sphinx
.. _sphinx: http://www.sphinx-doc.org
.. |breathe| replace:: Breathe
.. _breathe: https://breathe.readthedocs.io/en/latest

.. |cmake| replace:: CMake
.. _cmake: https://www.cmake.org
.. |ctest| replace:: CTest
.. _ctest: https://gitlab.kitware.com/cmake/community/wikis/doc/ctest/Testing-With-CTest
.. |ctest_doc| replace:: CTest Documentation
.. _ctest_doc: https://www.cmake.org/cmake/help/latest/manual/ctest.1.html
.. |cmake_download| replace:: CMake Downloads
.. _cmake_download: https://www.cmake.org/cmake/resources/software.html
.. |gcc| replace:: GNU Compiler Collection (g++)
.. _gcc: https://gcc.gnu.org
.. |clang| replace:: clang: a C language family frontend for LLVM
.. _clang: https://clang.llvm.org/
.. |icpc| replace:: Intel Composer XE Suites
.. _icpc: https://software.intel.com/en-us/intel-composer-xe/
.. |hdf5| replace:: Hierarchical Data Format V5 (HDF5)
.. _hdf5: https://www.hdfgroup.org/HDF5
.. |papi| replace:: Performance Application Programming Interface (PAPI)
.. _papi: https://icl.cs.utk.edu/papi/
.. |lapack| replace:: Linear Algebra PACKage (LAPACK)
.. _lapack: https://math-atlas.sourceforge.net/
.. |blas| replace:: Basic Linear Algebra Subroutines 3 (BLAS)
.. _blas: https://math-atlas.sourceforge.net/
.. |openmpi| replace:: Open MPI
.. _openmpi: https://www.open-mpi.org
.. |cuda| replace:: CUDA
.. _cuda: https://www.nvidia.com/object/cuda_home_new.html

.. |semver| replace:: semver
.. _semver: https://semver.org

.. |tbb| replace:: Intel Threading Building Blocks (TBB)
.. _tbb: https://www.threadingbuildingblocks.org/
.. |vtune| replace:: Intel VTune
.. _vtune: https://software.intel.com/content/www/us/en/develop/tools/vtune-profiler.html
.. |mpi| replace:: MPI
.. _mpi: https://en.wikipedia.org/wiki/Message_Passing_Interface
.. |openmp| replace:: OpenMP
.. _openmp: https://openmp.org/wp/
'''

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst']

# The encoding of source files.
source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Einsums'
project_copyright = f"2022-{datetime.now().year}, Einsums Developers"
author = 'Einsums Developers'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y.Z version.
version = '@EINSUMS_CONF_DOCUMENTATION_SHORT_VERSION@'
# The full version, including alpha/beta/rc tags.
release = '@EINSUMS_CONF_DOCUMENTATION_VERSION@'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
modindex_common_prefix = ['einsums']

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'pydata_sphinx_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    # "home_page_in_toc": True,
    # "repository_url": "https://github.com/Einsums/Einsums",
    # "use_repository_button": True,
    # "use_issues_button": True,
    "logo": {
        "image_light": "einsums-logo.png",
        "image_dark": "einsums-logo.png",
        "text": "Einsums",
    },
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_css_files = ['css/einsums.css']
html_context = {
    'display_github': True,
    'github_user': 'STEllAR-GROUP',
    'github_repo': 'einsums',
    'github_version': 'master/docs/sphinx/',
}

# In case no commit is found, link to the master
if "@EINSUMS_WITH_GIT_COMMIT_SHORT@" != "":
    html_context['commit'] = "@EINSUMS_WITH_GIT_COMMIT_SHORT@"
else:
    html_context['commit'] = "master"

if "@EINSUMS_WITH_GIT_COMMIT@" != "":
    html_context['fullcommit'] = "@EINSUMS_WITH_GIT_COMMIT@"
else:
    html_context['fullcommit'] = "master"

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If false, no module index is generated.
html_domain_indices = True

# If false, no index is generated.
html_use_index = True

# If true, the index is split into individual pages for each letter.
html_split_index = True

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
html_search_language = 'en'

# Files mentioned in this list are used by sphinxcontrib.bibtex extension to generate
# references/citations
bibtex_bibfiles = ['references.bib']
